
AutoGardener_Indoor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041e4  080041e4  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  080041e4  080041e4  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041ec  080041ec  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041ec  080041ec  000141ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041f0  080041f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080041f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000004  080041f8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  080041f8  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6ae  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dea  00000000  00000000  0002d6da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  0002f4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e68  00000000  00000000  00030438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011a56  00000000  00000000  000312a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b5ca  00000000  00000000  00042cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006edb0  00000000  00000000  0004e2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bd070  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000387c  00000000  00000000  000bd0ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004160 	.word	0x08004160

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08004160 	.word	0x08004160

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	464f      	mov	r7, r9
 8000438:	4646      	mov	r6, r8
 800043a:	46d6      	mov	lr, sl
 800043c:	b5c0      	push	{r6, r7, lr}
 800043e:	0004      	movs	r4, r0
 8000440:	b082      	sub	sp, #8
 8000442:	000d      	movs	r5, r1
 8000444:	4691      	mov	r9, r2
 8000446:	4698      	mov	r8, r3
 8000448:	428b      	cmp	r3, r1
 800044a:	d82f      	bhi.n	80004ac <__udivmoddi4+0x78>
 800044c:	d02c      	beq.n	80004a8 <__udivmoddi4+0x74>
 800044e:	4641      	mov	r1, r8
 8000450:	4648      	mov	r0, r9
 8000452:	f000 f8b1 	bl	80005b8 <__clzdi2>
 8000456:	0029      	movs	r1, r5
 8000458:	0006      	movs	r6, r0
 800045a:	0020      	movs	r0, r4
 800045c:	f000 f8ac 	bl	80005b8 <__clzdi2>
 8000460:	1a33      	subs	r3, r6, r0
 8000462:	469c      	mov	ip, r3
 8000464:	3b20      	subs	r3, #32
 8000466:	469a      	mov	sl, r3
 8000468:	d500      	bpl.n	800046c <__udivmoddi4+0x38>
 800046a:	e076      	b.n	800055a <__udivmoddi4+0x126>
 800046c:	464b      	mov	r3, r9
 800046e:	4652      	mov	r2, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	001f      	movs	r7, r3
 8000474:	464b      	mov	r3, r9
 8000476:	4662      	mov	r2, ip
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d828      	bhi.n	80004d2 <__udivmoddi4+0x9e>
 8000480:	d025      	beq.n	80004ce <__udivmoddi4+0x9a>
 8000482:	4653      	mov	r3, sl
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5a>
 800048c:	e07b      	b.n	8000586 <__udivmoddi4+0x152>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	4652      	mov	r2, sl
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4662      	mov	r2, ip
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e018      	b.n	80004da <__udivmoddi4+0xa6>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9d0      	bls.n	800044e <__udivmoddi4+0x1a>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8a>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b002      	add	sp, #8
 80004c4:	bc1c      	pop	{r2, r3, r4}
 80004c6:	4690      	mov	r8, r2
 80004c8:	4699      	mov	r9, r3
 80004ca:	46a2      	mov	sl, r4
 80004cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d9d7      	bls.n	8000482 <__udivmoddi4+0x4e>
 80004d2:	2200      	movs	r2, #0
 80004d4:	2300      	movs	r3, #0
 80004d6:	9200      	str	r2, [sp, #0]
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	4663      	mov	r3, ip
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d0e9      	beq.n	80004b4 <__udivmoddi4+0x80>
 80004e0:	07fb      	lsls	r3, r7, #31
 80004e2:	4698      	mov	r8, r3
 80004e4:	4641      	mov	r1, r8
 80004e6:	0872      	lsrs	r2, r6, #1
 80004e8:	430a      	orrs	r2, r1
 80004ea:	087b      	lsrs	r3, r7, #1
 80004ec:	4666      	mov	r6, ip
 80004ee:	e00e      	b.n	800050e <__udivmoddi4+0xda>
 80004f0:	42ab      	cmp	r3, r5
 80004f2:	d101      	bne.n	80004f8 <__udivmoddi4+0xc4>
 80004f4:	42a2      	cmp	r2, r4
 80004f6:	d80c      	bhi.n	8000512 <__udivmoddi4+0xde>
 80004f8:	1aa4      	subs	r4, r4, r2
 80004fa:	419d      	sbcs	r5, r3
 80004fc:	2001      	movs	r0, #1
 80004fe:	1924      	adds	r4, r4, r4
 8000500:	416d      	adcs	r5, r5
 8000502:	2100      	movs	r1, #0
 8000504:	3e01      	subs	r6, #1
 8000506:	1824      	adds	r4, r4, r0
 8000508:	414d      	adcs	r5, r1
 800050a:	2e00      	cmp	r6, #0
 800050c:	d006      	beq.n	800051c <__udivmoddi4+0xe8>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d9ee      	bls.n	80004f0 <__udivmoddi4+0xbc>
 8000512:	3e01      	subs	r6, #1
 8000514:	1924      	adds	r4, r4, r4
 8000516:	416d      	adcs	r5, r5
 8000518:	2e00      	cmp	r6, #0
 800051a:	d1f8      	bne.n	800050e <__udivmoddi4+0xda>
 800051c:	9800      	ldr	r0, [sp, #0]
 800051e:	9901      	ldr	r1, [sp, #4]
 8000520:	4653      	mov	r3, sl
 8000522:	1900      	adds	r0, r0, r4
 8000524:	4169      	adcs	r1, r5
 8000526:	2b00      	cmp	r3, #0
 8000528:	db23      	blt.n	8000572 <__udivmoddi4+0x13e>
 800052a:	002b      	movs	r3, r5
 800052c:	4652      	mov	r2, sl
 800052e:	40d3      	lsrs	r3, r2
 8000530:	002a      	movs	r2, r5
 8000532:	4664      	mov	r4, ip
 8000534:	40e2      	lsrs	r2, r4
 8000536:	001c      	movs	r4, r3
 8000538:	4653      	mov	r3, sl
 800053a:	0015      	movs	r5, r2
 800053c:	2b00      	cmp	r3, #0
 800053e:	db2d      	blt.n	800059c <__udivmoddi4+0x168>
 8000540:	0026      	movs	r6, r4
 8000542:	4657      	mov	r7, sl
 8000544:	40be      	lsls	r6, r7
 8000546:	0033      	movs	r3, r6
 8000548:	0026      	movs	r6, r4
 800054a:	4667      	mov	r7, ip
 800054c:	40be      	lsls	r6, r7
 800054e:	0032      	movs	r2, r6
 8000550:	1a80      	subs	r0, r0, r2
 8000552:	4199      	sbcs	r1, r3
 8000554:	9000      	str	r0, [sp, #0]
 8000556:	9101      	str	r1, [sp, #4]
 8000558:	e7ac      	b.n	80004b4 <__udivmoddi4+0x80>
 800055a:	4662      	mov	r2, ip
 800055c:	2320      	movs	r3, #32
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	464a      	mov	r2, r9
 8000562:	40da      	lsrs	r2, r3
 8000564:	4661      	mov	r1, ip
 8000566:	0013      	movs	r3, r2
 8000568:	4642      	mov	r2, r8
 800056a:	408a      	lsls	r2, r1
 800056c:	0017      	movs	r7, r2
 800056e:	431f      	orrs	r7, r3
 8000570:	e780      	b.n	8000474 <__udivmoddi4+0x40>
 8000572:	4662      	mov	r2, ip
 8000574:	2320      	movs	r3, #32
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	4666      	mov	r6, ip
 800057c:	409a      	lsls	r2, r3
 800057e:	0023      	movs	r3, r4
 8000580:	40f3      	lsrs	r3, r6
 8000582:	4313      	orrs	r3, r2
 8000584:	e7d4      	b.n	8000530 <__udivmoddi4+0xfc>
 8000586:	4662      	mov	r2, ip
 8000588:	2320      	movs	r3, #32
 800058a:	2100      	movs	r1, #0
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	2200      	movs	r2, #0
 8000590:	9100      	str	r1, [sp, #0]
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	2201      	movs	r2, #1
 8000596:	40da      	lsrs	r2, r3
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	e780      	b.n	800049e <__udivmoddi4+0x6a>
 800059c:	2320      	movs	r3, #32
 800059e:	4662      	mov	r2, ip
 80005a0:	0026      	movs	r6, r4
 80005a2:	1a9b      	subs	r3, r3, r2
 80005a4:	40de      	lsrs	r6, r3
 80005a6:	002f      	movs	r7, r5
 80005a8:	46b0      	mov	r8, r6
 80005aa:	4666      	mov	r6, ip
 80005ac:	40b7      	lsls	r7, r6
 80005ae:	4646      	mov	r6, r8
 80005b0:	003b      	movs	r3, r7
 80005b2:	4333      	orrs	r3, r6
 80005b4:	e7c8      	b.n	8000548 <__udivmoddi4+0x114>
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__clzdi2>:
 80005b8:	b510      	push	{r4, lr}
 80005ba:	2900      	cmp	r1, #0
 80005bc:	d103      	bne.n	80005c6 <__clzdi2+0xe>
 80005be:	f000 f807 	bl	80005d0 <__clzsi2>
 80005c2:	3020      	adds	r0, #32
 80005c4:	e002      	b.n	80005cc <__clzdi2+0x14>
 80005c6:	1c08      	adds	r0, r1, #0
 80005c8:	f000 f802 	bl	80005d0 <__clzsi2>
 80005cc:	bd10      	pop	{r4, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)

080005d0 <__clzsi2>:
 80005d0:	211c      	movs	r1, #28
 80005d2:	2301      	movs	r3, #1
 80005d4:	041b      	lsls	r3, r3, #16
 80005d6:	4298      	cmp	r0, r3
 80005d8:	d301      	bcc.n	80005de <__clzsi2+0xe>
 80005da:	0c00      	lsrs	r0, r0, #16
 80005dc:	3910      	subs	r1, #16
 80005de:	0a1b      	lsrs	r3, r3, #8
 80005e0:	4298      	cmp	r0, r3
 80005e2:	d301      	bcc.n	80005e8 <__clzsi2+0x18>
 80005e4:	0a00      	lsrs	r0, r0, #8
 80005e6:	3908      	subs	r1, #8
 80005e8:	091b      	lsrs	r3, r3, #4
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0x22>
 80005ee:	0900      	lsrs	r0, r0, #4
 80005f0:	3904      	subs	r1, #4
 80005f2:	a202      	add	r2, pc, #8	; (adr r2, 80005fc <__clzsi2+0x2c>)
 80005f4:	5c10      	ldrb	r0, [r2, r0]
 80005f6:	1840      	adds	r0, r0, r1
 80005f8:	4770      	bx	lr
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	02020304 	.word	0x02020304
 8000600:	01010101 	.word	0x01010101
	...

0800060c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000612:	1dfb      	adds	r3, r7, #7
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <HAL_Init+0x3c>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <HAL_Init+0x3c>)
 800061e:	2140      	movs	r1, #64	; 0x40
 8000620:	430a      	orrs	r2, r1
 8000622:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000624:	2000      	movs	r0, #0
 8000626:	f000 f811 	bl	800064c <HAL_InitTick>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d003      	beq.n	8000636 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]
 8000634:	e001      	b.n	800063a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000636:	f003 fb45 	bl	8003cc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	781b      	ldrb	r3, [r3, #0]
}
 800063e:	0018      	movs	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	b002      	add	sp, #8
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	40022000 	.word	0x40022000

0800064c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000654:	230f      	movs	r3, #15
 8000656:	18fb      	adds	r3, r7, r3
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <HAL_InitTick+0x50>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	23fa      	movs	r3, #250	; 0xfa
 8000662:	0099      	lsls	r1, r3, #2
 8000664:	0010      	movs	r0, r2
 8000666:	f7ff fd4f 	bl	8000108 <__udivsi3>
 800066a:	0003      	movs	r3, r0
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fd46 	bl	80010fe <HAL_SYSTICK_Config>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d004      	beq.n	8000680 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000676:	230f      	movs	r3, #15
 8000678:	18fb      	adds	r3, r7, r3
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	e006      	b.n	800068e <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000680:	6879      	ldr	r1, [r7, #4]
 8000682:	2301      	movs	r3, #1
 8000684:	425b      	negs	r3, r3
 8000686:	2200      	movs	r2, #0
 8000688:	0018      	movs	r0, r3
 800068a:	f000 fd23 	bl	80010d4 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800068e:	230f      	movs	r3, #15
 8000690:	18fb      	adds	r3, r7, r3
 8000692:	781b      	ldrb	r3, [r3, #0]
}
 8000694:	0018      	movs	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	b004      	add	sp, #16
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000000 	.word	0x20000000

080006a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  uwTick++;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <HAL_IncTick+0x14>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	4b02      	ldr	r3, [pc, #8]	; (80006b4 <HAL_IncTick+0x14>)
 80006ac:	601a      	str	r2, [r3, #0]
}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000020 	.word	0x20000020

080006b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  return uwTick;
 80006bc:	4b02      	ldr	r3, [pc, #8]	; (80006c8 <HAL_GetTick+0x10>)
 80006be:	681b      	ldr	r3, [r3, #0]
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	20000020 	.word	0x20000020

080006cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d4:	f7ff fff0 	bl	80006b8 <HAL_GetTick>
 80006d8:	0003      	movs	r3, r0
 80006da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3301      	adds	r3, #1
 80006e4:	d002      	beq.n	80006ec <HAL_Delay+0x20>
  {
    wait++;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	3301      	adds	r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	f7ff ffe3 	bl	80006b8 <HAL_GetTick>
 80006f2:	0002      	movs	r2, r0
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d8f7      	bhi.n	80006ee <HAL_Delay+0x22>
  {
  }
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b004      	add	sp, #16
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d101      	bne.n	800071a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	e159      	b.n	80009ce <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800071e:	2b00      	cmp	r3, #0
 8000720:	d10a      	bne.n	8000738 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2200      	movs	r2, #0
 8000726:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2250      	movs	r2, #80	; 0x50
 800072c:	2100      	movs	r1, #0
 800072e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	0018      	movs	r0, r3
 8000734:	f003 fada 	bl	8003cec <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800073c:	2210      	movs	r2, #16
 800073e:	4013      	ands	r3, r2
 8000740:	2b10      	cmp	r3, #16
 8000742:	d005      	beq.n	8000750 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	2204      	movs	r2, #4
 800074c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800074e:	d00b      	beq.n	8000768 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000754:	2210      	movs	r2, #16
 8000756:	431a      	orrs	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2250      	movs	r2, #80	; 0x50
 8000760:	2100      	movs	r1, #0
 8000762:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000764:	2301      	movs	r3, #1
 8000766:	e132      	b.n	80009ce <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800076c:	4a9a      	ldr	r2, [pc, #616]	; (80009d8 <HAL_ADC_Init+0x2d0>)
 800076e:	4013      	ands	r3, r2
 8000770:	2202      	movs	r2, #2
 8000772:	431a      	orrs	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	2203      	movs	r2, #3
 8000780:	4013      	ands	r3, r2
 8000782:	2b01      	cmp	r3, #1
 8000784:	d108      	bne.n	8000798 <HAL_ADC_Init+0x90>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2201      	movs	r2, #1
 800078e:	4013      	ands	r3, r2
 8000790:	2b01      	cmp	r3, #1
 8000792:	d101      	bne.n	8000798 <HAL_ADC_Init+0x90>
 8000794:	2301      	movs	r3, #1
 8000796:	e000      	b.n	800079a <HAL_ADC_Init+0x92>
 8000798:	2300      	movs	r3, #0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d149      	bne.n	8000832 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685a      	ldr	r2, [r3, #4]
 80007a2:	23c0      	movs	r3, #192	; 0xc0
 80007a4:	061b      	lsls	r3, r3, #24
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d00b      	beq.n	80007c2 <HAL_ADC_Init+0xba>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	685a      	ldr	r2, [r3, #4]
 80007ae:	2380      	movs	r3, #128	; 0x80
 80007b0:	05db      	lsls	r3, r3, #23
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d005      	beq.n	80007c2 <HAL_ADC_Init+0xba>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	2380      	movs	r3, #128	; 0x80
 80007bc:	061b      	lsls	r3, r3, #24
 80007be:	429a      	cmp	r2, r3
 80007c0:	d111      	bne.n	80007e6 <HAL_ADC_Init+0xde>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	691a      	ldr	r2, [r3, #16]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	0092      	lsls	r2, r2, #2
 80007ce:	0892      	lsrs	r2, r2, #2
 80007d0:	611a      	str	r2, [r3, #16]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	6919      	ldr	r1, [r3, #16]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	430a      	orrs	r2, r1
 80007e2:	611a      	str	r2, [r3, #16]
 80007e4:	e014      	b.n	8000810 <HAL_ADC_Init+0x108>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	691a      	ldr	r2, [r3, #16]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	0092      	lsls	r2, r2, #2
 80007f2:	0892      	lsrs	r2, r2, #2
 80007f4:	611a      	str	r2, [r3, #16]
 80007f6:	4b79      	ldr	r3, [pc, #484]	; (80009dc <HAL_ADC_Init+0x2d4>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4b78      	ldr	r3, [pc, #480]	; (80009dc <HAL_ADC_Init+0x2d4>)
 80007fc:	4978      	ldr	r1, [pc, #480]	; (80009e0 <HAL_ADC_Init+0x2d8>)
 80007fe:	400a      	ands	r2, r1
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	4b76      	ldr	r3, [pc, #472]	; (80009dc <HAL_ADC_Init+0x2d4>)
 8000804:	6819      	ldr	r1, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	685a      	ldr	r2, [r3, #4]
 800080a:	4b74      	ldr	r3, [pc, #464]	; (80009dc <HAL_ADC_Init+0x2d4>)
 800080c:	430a      	orrs	r2, r1
 800080e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	68da      	ldr	r2, [r3, #12]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2118      	movs	r1, #24
 800081c:	438a      	bics	r2, r1
 800081e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68d9      	ldr	r1, [r3, #12]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689a      	ldr	r2, [r3, #8]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	430a      	orrs	r2, r1
 8000830:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000832:	4b6a      	ldr	r3, [pc, #424]	; (80009dc <HAL_ADC_Init+0x2d4>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4b69      	ldr	r3, [pc, #420]	; (80009dc <HAL_ADC_Init+0x2d4>)
 8000838:	496a      	ldr	r1, [pc, #424]	; (80009e4 <HAL_ADC_Init+0x2dc>)
 800083a:	400a      	ands	r2, r1
 800083c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800083e:	4b67      	ldr	r3, [pc, #412]	; (80009dc <HAL_ADC_Init+0x2d4>)
 8000840:	6819      	ldr	r1, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000846:	065a      	lsls	r2, r3, #25
 8000848:	4b64      	ldr	r3, [pc, #400]	; (80009dc <HAL_ADC_Init+0x2d4>)
 800084a:	430a      	orrs	r2, r1
 800084c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	689a      	ldr	r2, [r3, #8]
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	055b      	lsls	r3, r3, #21
 8000858:	4013      	ands	r3, r2
 800085a:	d108      	bne.n	800086e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	689a      	ldr	r2, [r3, #8]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2180      	movs	r1, #128	; 0x80
 8000868:	0549      	lsls	r1, r1, #21
 800086a:	430a      	orrs	r2, r1
 800086c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68da      	ldr	r2, [r3, #12]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	495b      	ldr	r1, [pc, #364]	; (80009e8 <HAL_ADC_Init+0x2e0>)
 800087a:	400a      	ands	r2, r1
 800087c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	68d9      	ldr	r1, [r3, #12]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	691b      	ldr	r3, [r3, #16]
 800088c:	2b02      	cmp	r3, #2
 800088e:	d101      	bne.n	8000894 <HAL_ADC_Init+0x18c>
 8000890:	2304      	movs	r3, #4
 8000892:	e000      	b.n	8000896 <HAL_ADC_Init+0x18e>
 8000894:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000896:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2020      	movs	r0, #32
 800089c:	5c1b      	ldrb	r3, [r3, r0]
 800089e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80008a0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	202c      	movs	r0, #44	; 0x2c
 80008a6:	5c1b      	ldrb	r3, [r3, r0]
 80008a8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80008aa:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80008b0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80008b8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80008c0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	430a      	orrs	r2, r1
 80008c8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008ce:	23c2      	movs	r3, #194	; 0xc2
 80008d0:	33ff      	adds	r3, #255	; 0xff
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d00b      	beq.n	80008ee <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	68d9      	ldr	r1, [r3, #12]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80008e4:	431a      	orrs	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	430a      	orrs	r2, r1
 80008ec:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2221      	movs	r2, #33	; 0x21
 80008f2:	5c9b      	ldrb	r3, [r3, r2]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d11a      	bne.n	800092e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2220      	movs	r2, #32
 80008fc:	5c9b      	ldrb	r3, [r3, r2]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d109      	bne.n	8000916 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	68da      	ldr	r2, [r3, #12]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	0249      	lsls	r1, r1, #9
 8000910:	430a      	orrs	r2, r1
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	e00b      	b.n	800092e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800091a:	2220      	movs	r2, #32
 800091c:	431a      	orrs	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000926:	2201      	movs	r2, #1
 8000928:	431a      	orrs	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000932:	2b01      	cmp	r3, #1
 8000934:	d11f      	bne.n	8000976 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	691a      	ldr	r2, [r3, #16]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	492a      	ldr	r1, [pc, #168]	; (80009ec <HAL_ADC_Init+0x2e4>)
 8000942:	400a      	ands	r2, r1
 8000944:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	6919      	ldr	r1, [r3, #16]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000954:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800095a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	430a      	orrs	r2, r1
 8000962:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	691a      	ldr	r2, [r3, #16]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2101      	movs	r1, #1
 8000970:	430a      	orrs	r2, r1
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	e00e      	b.n	8000994 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	691b      	ldr	r3, [r3, #16]
 800097c:	2201      	movs	r2, #1
 800097e:	4013      	ands	r3, r2
 8000980:	2b01      	cmp	r3, #1
 8000982:	d107      	bne.n	8000994 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	691a      	ldr	r2, [r3, #16]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2101      	movs	r1, #1
 8000990:	438a      	bics	r2, r1
 8000992:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	695a      	ldr	r2, [r3, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2107      	movs	r1, #7
 80009a0:	438a      	bics	r2, r1
 80009a2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	6959      	ldr	r1, [r3, #20]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	430a      	orrs	r2, r1
 80009b4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009c0:	2203      	movs	r2, #3
 80009c2:	4393      	bics	r3, r2
 80009c4:	2201      	movs	r2, #1
 80009c6:	431a      	orrs	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	0018      	movs	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b002      	add	sp, #8
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	fffffefd 	.word	0xfffffefd
 80009dc:	40012708 	.word	0x40012708
 80009e0:	ffc3ffff 	.word	0xffc3ffff
 80009e4:	fdffffff 	.word	0xfdffffff
 80009e8:	fffe0219 	.word	0xfffe0219
 80009ec:	fffffc03 	.word	0xfffffc03

080009f0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009f8:	230f      	movs	r3, #15
 80009fa:	18fb      	adds	r3, r7, r3
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	2204      	movs	r2, #4
 8000a08:	4013      	ands	r3, r2
 8000a0a:	d138      	bne.n	8000a7e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2250      	movs	r2, #80	; 0x50
 8000a10:	5c9b      	ldrb	r3, [r3, r2]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d101      	bne.n	8000a1a <HAL_ADC_Start+0x2a>
 8000a16:	2302      	movs	r3, #2
 8000a18:	e038      	b.n	8000a8c <HAL_ADC_Start+0x9c>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2250      	movs	r2, #80	; 0x50
 8000a1e:	2101      	movs	r1, #1
 8000a20:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d007      	beq.n	8000a3a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	18fc      	adds	r4, r7, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	0018      	movs	r0, r3
 8000a32:	f000 f999 	bl	8000d68 <ADC_Enable>
 8000a36:	0003      	movs	r3, r0
 8000a38:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	18fb      	adds	r3, r7, r3
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d120      	bne.n	8000a86 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a48:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <HAL_ADC_Start+0xa4>)
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	0052      	lsls	r2, r2, #1
 8000a50:	431a      	orrs	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2250      	movs	r2, #80	; 0x50
 8000a60:	2100      	movs	r1, #0
 8000a62:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	221c      	movs	r2, #28
 8000a6a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2104      	movs	r1, #4
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	e003      	b.n	8000a86 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000a7e:	230f      	movs	r3, #15
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	2202      	movs	r2, #2
 8000a84:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a86:	230f      	movs	r3, #15
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	781b      	ldrb	r3, [r3, #0]
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b005      	add	sp, #20
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	fffff0fe 	.word	0xfffff0fe

08000a98 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000a98:	b5b0      	push	{r4, r5, r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	18fb      	adds	r3, r7, r3
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2250      	movs	r2, #80	; 0x50
 8000aac:	5c9b      	ldrb	r3, [r3, r2]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d101      	bne.n	8000ab6 <HAL_ADC_Stop+0x1e>
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	e02a      	b.n	8000b0c <HAL_ADC_Stop+0x74>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2250      	movs	r2, #80	; 0x50
 8000aba:	2101      	movs	r1, #1
 8000abc:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000abe:	250f      	movs	r5, #15
 8000ac0:	197c      	adds	r4, r7, r5
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f000 fa0f 	bl	8000ee8 <ADC_ConversionStop>
 8000aca:	0003      	movs	r3, r0
 8000acc:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000ace:	197b      	adds	r3, r7, r5
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d113      	bne.n	8000afe <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000ad6:	250f      	movs	r5, #15
 8000ad8:	197c      	adds	r4, r7, r5
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 f9a3 	bl	8000e28 <ADC_Disable>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000ae6:	197b      	adds	r3, r7, r5
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d107      	bne.n	8000afe <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000af2:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_ADC_Stop+0x7c>)
 8000af4:	4013      	ands	r3, r2
 8000af6:	2201      	movs	r2, #1
 8000af8:	431a      	orrs	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2250      	movs	r2, #80	; 0x50
 8000b02:	2100      	movs	r1, #0
 8000b04:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000b06:	230f      	movs	r3, #15
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	781b      	ldrb	r3, [r3, #0]
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b004      	add	sp, #16
 8000b12:	bdb0      	pop	{r4, r5, r7, pc}
 8000b14:	fffffefe 	.word	0xfffffefe

08000b18 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	2b08      	cmp	r3, #8
 8000b30:	d102      	bne.n	8000b38 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000b32:	2308      	movs	r3, #8
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	e014      	b.n	8000b62 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4013      	ands	r3, r2
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d10b      	bne.n	8000b5e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b4a:	2220      	movs	r2, #32
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2250      	movs	r2, #80	; 0x50
 8000b56:	2100      	movs	r1, #0
 8000b58:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e06c      	b.n	8000c38 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000b5e:	230c      	movs	r3, #12
 8000b60:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000b62:	f7ff fda9 	bl	80006b8 <HAL_GetTick>
 8000b66:	0003      	movs	r3, r0
 8000b68:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000b6a:	e019      	b.n	8000ba0 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	d016      	beq.n	8000ba0 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d007      	beq.n	8000b88 <HAL_ADC_PollForConversion+0x70>
 8000b78:	f7ff fd9e 	bl	80006b8 <HAL_GetTick>
 8000b7c:	0002      	movs	r2, r0
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d20b      	bcs.n	8000ba0 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2250      	movs	r2, #80	; 0x50
 8000b98:	2100      	movs	r1, #0
 8000b9a:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	e04b      	b.n	8000c38 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	d0df      	beq.n	8000b6c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bb0:	2280      	movs	r2, #128	; 0x80
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	68da      	ldr	r2, [r3, #12]
 8000bc0:	23c0      	movs	r3, #192	; 0xc0
 8000bc2:	011b      	lsls	r3, r3, #4
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	d12e      	bne.n	8000c26 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2220      	movs	r2, #32
 8000bcc:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d129      	bne.n	8000c26 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2208      	movs	r2, #8
 8000bda:	4013      	ands	r3, r2
 8000bdc:	2b08      	cmp	r3, #8
 8000bde:	d122      	bne.n	8000c26 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2204      	movs	r2, #4
 8000be8:	4013      	ands	r3, r2
 8000bea:	d110      	bne.n	8000c0e <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	210c      	movs	r1, #12
 8000bf8:	438a      	bics	r2, r1
 8000bfa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c00:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <HAL_ADC_PollForConversion+0x128>)
 8000c02:	4013      	ands	r3, r2
 8000c04:	2201      	movs	r2, #1
 8000c06:	431a      	orrs	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	655a      	str	r2, [r3, #84]	; 0x54
 8000c0c:	e00b      	b.n	8000c26 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c12:	2220      	movs	r2, #32
 8000c14:	431a      	orrs	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	2201      	movs	r2, #1
 8000c20:	431a      	orrs	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d103      	bne.n	8000c36 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b004      	add	sp, #16
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	fffffefe 	.word	0xfffffefe

08000c44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000c52:	0018      	movs	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b002      	add	sp, #8
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2250      	movs	r2, #80	; 0x50
 8000c6a:	5c9b      	ldrb	r3, [r3, r2]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d101      	bne.n	8000c74 <HAL_ADC_ConfigChannel+0x18>
 8000c70:	2302      	movs	r3, #2
 8000c72:	e06c      	b.n	8000d4e <HAL_ADC_ConfigChannel+0xf2>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2250      	movs	r2, #80	; 0x50
 8000c78:	2101      	movs	r1, #1
 8000c7a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	2204      	movs	r2, #4
 8000c84:	4013      	ands	r3, r2
 8000c86:	d00b      	beq.n	8000ca0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c8c:	2220      	movs	r2, #32
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2250      	movs	r2, #80	; 0x50
 8000c98:	2100      	movs	r1, #0
 8000c9a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e056      	b.n	8000d4e <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	4a2c      	ldr	r2, [pc, #176]	; (8000d58 <HAL_ADC_ConfigChannel+0xfc>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d028      	beq.n	8000cfc <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	035b      	lsls	r3, r3, #13
 8000cb6:	0b5a      	lsrs	r2, r3, #13
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	02db      	lsls	r3, r3, #11
 8000cc8:	4013      	ands	r3, r2
 8000cca:	d009      	beq.n	8000ce0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8000ccc:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <HAL_ADC_ConfigChannel+0x100>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <HAL_ADC_ConfigChannel+0x100>)
 8000cd2:	2180      	movs	r1, #128	; 0x80
 8000cd4:	0409      	lsls	r1, r1, #16
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000cda:	200a      	movs	r0, #10
 8000cdc:	f000 f94a 	bl	8000f74 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	029b      	lsls	r3, r3, #10
 8000ce8:	4013      	ands	r3, r2
 8000cea:	d02b      	beq.n	8000d44 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_ADC_ConfigChannel+0x100>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <HAL_ADC_ConfigChannel+0x100>)
 8000cf2:	2180      	movs	r1, #128	; 0x80
 8000cf4:	03c9      	lsls	r1, r1, #15
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	e023      	b.n	8000d44 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	035b      	lsls	r3, r3, #13
 8000d08:	0b5b      	lsrs	r3, r3, #13
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	400a      	ands	r2, r1
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	02db      	lsls	r3, r3, #11
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	d005      	beq.n	8000d2c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_ADC_ConfigChannel+0x100>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <HAL_ADC_ConfigChannel+0x100>)
 8000d26:	490e      	ldr	r1, [pc, #56]	; (8000d60 <HAL_ADC_ConfigChannel+0x104>)
 8000d28:	400a      	ands	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	029b      	lsls	r3, r3, #10
 8000d34:	4013      	ands	r3, r2
 8000d36:	d005      	beq.n	8000d44 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_ADC_ConfigChannel+0x100>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <HAL_ADC_ConfigChannel+0x100>)
 8000d3e:	4909      	ldr	r1, [pc, #36]	; (8000d64 <HAL_ADC_ConfigChannel+0x108>)
 8000d40:	400a      	ands	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2250      	movs	r2, #80	; 0x50
 8000d48:	2100      	movs	r1, #0
 8000d4a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	0018      	movs	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b002      	add	sp, #8
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	00001001 	.word	0x00001001
 8000d5c:	40012708 	.word	0x40012708
 8000d60:	ff7fffff 	.word	0xff7fffff
 8000d64:	ffbfffff 	.word	0xffbfffff

08000d68 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d108      	bne.n	8000d94 <ADC_Enable+0x2c>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d101      	bne.n	8000d94 <ADC_Enable+0x2c>
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <ADC_Enable+0x2e>
 8000d94:	2300      	movs	r3, #0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d13f      	bne.n	8000e1a <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	4a20      	ldr	r2, [pc, #128]	; (8000e24 <ADC_Enable+0xbc>)
 8000da2:	4013      	ands	r3, r2
 8000da4:	d00d      	beq.n	8000dc2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000daa:	2210      	movs	r2, #16
 8000dac:	431a      	orrs	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db6:	2201      	movs	r2, #1
 8000db8:	431a      	orrs	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e02c      	b.n	8000e1c <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f000 f8ce 	bl	8000f74 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000dd8:	f7ff fc6e 	bl	80006b8 <HAL_GetTick>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000de0:	e014      	b.n	8000e0c <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000de2:	f7ff fc69 	bl	80006b8 <HAL_GetTick>
 8000de6:	0002      	movs	r2, r0
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b0a      	cmp	r3, #10
 8000dee:	d90d      	bls.n	8000e0c <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000df4:	2210      	movs	r2, #16
 8000df6:	431a      	orrs	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e00:	2201      	movs	r2, #1
 8000e02:	431a      	orrs	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e007      	b.n	8000e1c <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2201      	movs	r2, #1
 8000e14:	4013      	ands	r3, r2
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d1e3      	bne.n	8000de2 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b004      	add	sp, #16
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	80000017 	.word	0x80000017

08000e28 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d108      	bne.n	8000e54 <ADC_Disable+0x2c>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d101      	bne.n	8000e54 <ADC_Disable+0x2c>
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <ADC_Disable+0x2e>
 8000e54:	2300      	movs	r3, #0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d041      	beq.n	8000ede <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	2205      	movs	r2, #5
 8000e62:	4013      	ands	r3, r2
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d110      	bne.n	8000e8a <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2102      	movs	r1, #2
 8000e74:	430a      	orrs	r2, r1
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e80:	f7ff fc1a 	bl	80006b8 <HAL_GetTick>
 8000e84:	0003      	movs	r3, r0
 8000e86:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000e88:	e022      	b.n	8000ed0 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e8e:	2210      	movs	r2, #16
 8000e90:	431a      	orrs	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e01c      	b.n	8000ee0 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ea6:	f7ff fc07 	bl	80006b8 <HAL_GetTick>
 8000eaa:	0002      	movs	r2, r0
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b0a      	cmp	r3, #10
 8000eb2:	d90d      	bls.n	8000ed0 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eb8:	2210      	movs	r2, #16
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e007      	b.n	8000ee0 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4013      	ands	r3, r2
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d0e3      	beq.n	8000ea6 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b004      	add	sp, #16
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2204      	movs	r2, #4
 8000efc:	4013      	ands	r3, r2
 8000efe:	d034      	beq.n	8000f6a <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	2204      	movs	r2, #4
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d10d      	bne.n	8000f2a <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	2202      	movs	r2, #2
 8000f16:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000f18:	d107      	bne.n	8000f2a <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2110      	movs	r1, #16
 8000f26:	430a      	orrs	r2, r1
 8000f28:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f2a:	f7ff fbc5 	bl	80006b8 <HAL_GetTick>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000f32:	e014      	b.n	8000f5e <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000f34:	f7ff fbc0 	bl	80006b8 <HAL_GetTick>
 8000f38:	0002      	movs	r2, r0
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b0a      	cmp	r3, #10
 8000f40:	d90d      	bls.n	8000f5e <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f46:	2210      	movs	r2, #16
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f52:	2201      	movs	r2, #1
 8000f54:	431a      	orrs	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e006      	b.n	8000f6c <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	2204      	movs	r2, #4
 8000f66:	4013      	ands	r3, r2
 8000f68:	d1e4      	bne.n	8000f34 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b004      	add	sp, #16
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <ADC_DelayMicroSecond+0x34>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	490a      	ldr	r1, [pc, #40]	; (8000fac <ADC_DelayMicroSecond+0x38>)
 8000f82:	0018      	movs	r0, r3
 8000f84:	f7ff f8c0 	bl	8000108 <__udivsi3>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4353      	muls	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8000f92:	e002      	b.n	8000f9a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f9      	bne.n	8000f94 <ADC_DelayMicroSecond+0x20>
  } 
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b004      	add	sp, #16
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	000f4240 	.word	0x000f4240

08000fb0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	0002      	movs	r2, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8000fc4:	d932      	bls.n	800102c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc6:	4a2f      	ldr	r2, [pc, #188]	; (8001084 <NVIC_SetPriority+0xd4>)
 8000fc8:	1dfb      	adds	r3, r7, #7
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	0019      	movs	r1, r3
 8000fce:	230f      	movs	r3, #15
 8000fd0:	400b      	ands	r3, r1
 8000fd2:	3b08      	subs	r3, #8
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	3306      	adds	r3, #6
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	18d3      	adds	r3, r2, r3
 8000fdc:	3304      	adds	r3, #4
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	1dfa      	adds	r2, r7, #7
 8000fe2:	7812      	ldrb	r2, [r2, #0]
 8000fe4:	0011      	movs	r1, r2
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	400a      	ands	r2, r1
 8000fea:	00d2      	lsls	r2, r2, #3
 8000fec:	21ff      	movs	r1, #255	; 0xff
 8000fee:	4091      	lsls	r1, r2
 8000ff0:	000a      	movs	r2, r1
 8000ff2:	43d2      	mvns	r2, r2
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	019b      	lsls	r3, r3, #6
 8000ffc:	22ff      	movs	r2, #255	; 0xff
 8000ffe:	401a      	ands	r2, r3
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	0018      	movs	r0, r3
 8001006:	2303      	movs	r3, #3
 8001008:	4003      	ands	r3, r0
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800100e:	481d      	ldr	r0, [pc, #116]	; (8001084 <NVIC_SetPriority+0xd4>)
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	001c      	movs	r4, r3
 8001016:	230f      	movs	r3, #15
 8001018:	4023      	ands	r3, r4
 800101a:	3b08      	subs	r3, #8
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	430a      	orrs	r2, r1
 8001020:	3306      	adds	r3, #6
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	18c3      	adds	r3, r0, r3
 8001026:	3304      	adds	r3, #4
 8001028:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800102a:	e027      	b.n	800107c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800102c:	4a16      	ldr	r2, [pc, #88]	; (8001088 <NVIC_SetPriority+0xd8>)
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b25b      	sxtb	r3, r3
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	33c0      	adds	r3, #192	; 0xc0
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	589b      	ldr	r3, [r3, r2]
 800103c:	1dfa      	adds	r2, r7, #7
 800103e:	7812      	ldrb	r2, [r2, #0]
 8001040:	0011      	movs	r1, r2
 8001042:	2203      	movs	r2, #3
 8001044:	400a      	ands	r2, r1
 8001046:	00d2      	lsls	r2, r2, #3
 8001048:	21ff      	movs	r1, #255	; 0xff
 800104a:	4091      	lsls	r1, r2
 800104c:	000a      	movs	r2, r1
 800104e:	43d2      	mvns	r2, r2
 8001050:	401a      	ands	r2, r3
 8001052:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	019b      	lsls	r3, r3, #6
 8001058:	22ff      	movs	r2, #255	; 0xff
 800105a:	401a      	ands	r2, r3
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	0018      	movs	r0, r3
 8001062:	2303      	movs	r3, #3
 8001064:	4003      	ands	r3, r0
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800106a:	4807      	ldr	r0, [pc, #28]	; (8001088 <NVIC_SetPriority+0xd8>)
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b25b      	sxtb	r3, r3
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	430a      	orrs	r2, r1
 8001076:	33c0      	adds	r3, #192	; 0xc0
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	501a      	str	r2, [r3, r0]
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b003      	add	sp, #12
 8001082:	bd90      	pop	{r4, r7, pc}
 8001084:	e000ed00 	.word	0xe000ed00
 8001088:	e000e100 	.word	0xe000e100

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <SysTick_Config+0x40>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d901      	bls.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e010      	b.n	80010c4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <SysTick_Config+0x44>)
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	3a01      	subs	r2, #1
 80010a8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	2301      	movs	r3, #1
 80010ac:	425b      	negs	r3, r3
 80010ae:	2103      	movs	r1, #3
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff ff7d 	bl	8000fb0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <SysTick_Config+0x44>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SysTick_Config+0x44>)
 80010be:	2207      	movs	r2, #7
 80010c0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	0018      	movs	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b002      	add	sp, #8
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	00ffffff 	.word	0x00ffffff
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	210f      	movs	r1, #15
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	1c02      	adds	r2, r0, #0
 80010e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	0011      	movs	r1, r2
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff ff5d 	bl	8000fb0 <NVIC_SetPriority>
}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b004      	add	sp, #16
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff ffbf 	bl	800108c <SysTick_Config>
 800110e:	0003      	movs	r3, r0
}
 8001110:	0018      	movs	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	b002      	add	sp, #8
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800112e:	e149      	b.n	80013c4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4091      	lsls	r1, r2
 800113a:	000a      	movs	r2, r1
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d100      	bne.n	8001148 <HAL_GPIO_Init+0x30>
 8001146:	e13a      	b.n	80013be <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x40>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b12      	cmp	r3, #18
 8001156:	d123      	bne.n	80011a0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3208      	adds	r2, #8
 8001160:	0092      	lsls	r2, r2, #2
 8001162:	58d3      	ldr	r3, [r2, r3]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2207      	movs	r2, #7
 800116a:	4013      	ands	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	220f      	movs	r2, #15
 8001170:	409a      	lsls	r2, r3
 8001172:	0013      	movs	r3, r2
 8001174:	43da      	mvns	r2, r3
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	2107      	movs	r1, #7
 8001184:	400b      	ands	r3, r1
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	409a      	lsls	r2, r3
 800118a:	0013      	movs	r3, r2
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	08da      	lsrs	r2, r3, #3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3208      	adds	r2, #8
 800119a:	0092      	lsls	r2, r2, #2
 800119c:	6939      	ldr	r1, [r7, #16]
 800119e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d00b      	beq.n	80011c0 <HAL_GPIO_Init+0xa8>
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d007      	beq.n	80011c0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011b4:	2b11      	cmp	r3, #17
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b12      	cmp	r3, #18
 80011be:	d130      	bne.n	8001222 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	409a      	lsls	r2, r3
 80011ce:	0013      	movs	r3, r2
 80011d0:	43da      	mvns	r2, r3
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	409a      	lsls	r2, r3
 80011e2:	0013      	movs	r3, r2
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f6:	2201      	movs	r2, #1
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
 80011fc:	0013      	movs	r3, r2
 80011fe:	43da      	mvns	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	2201      	movs	r2, #1
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
 8001214:	0013      	movs	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	409a      	lsls	r2, r3
 8001230:	0013      	movs	r3, r2
 8001232:	43da      	mvns	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2203      	movs	r2, #3
 8001240:	401a      	ands	r2, r3
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	409a      	lsls	r2, r3
 8001248:	0013      	movs	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	43da      	mvns	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	055b      	lsls	r3, r3, #21
 800128e:	4013      	ands	r3, r2
 8001290:	d100      	bne.n	8001294 <HAL_GPIO_Init+0x17c>
 8001292:	e094      	b.n	80013be <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001294:	4b51      	ldr	r3, [pc, #324]	; (80013dc <HAL_GPIO_Init+0x2c4>)
 8001296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001298:	4b50      	ldr	r3, [pc, #320]	; (80013dc <HAL_GPIO_Init+0x2c4>)
 800129a:	2101      	movs	r1, #1
 800129c:	430a      	orrs	r2, r1
 800129e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80012a0:	4a4f      	ldr	r2, [pc, #316]	; (80013e0 <HAL_GPIO_Init+0x2c8>)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	589b      	ldr	r3, [r3, r2]
 80012ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2203      	movs	r2, #3
 80012b2:	4013      	ands	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	220f      	movs	r2, #15
 80012b8:	409a      	lsls	r2, r3
 80012ba:	0013      	movs	r3, r2
 80012bc:	43da      	mvns	r2, r3
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	23a0      	movs	r3, #160	; 0xa0
 80012c8:	05db      	lsls	r3, r3, #23
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x1de>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a44      	ldr	r2, [pc, #272]	; (80013e4 <HAL_GPIO_Init+0x2cc>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x1da>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a43      	ldr	r2, [pc, #268]	; (80013e8 <HAL_GPIO_Init+0x2d0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x1d6>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a42      	ldr	r2, [pc, #264]	; (80013ec <HAL_GPIO_Init+0x2d4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x1d2>
 80012e6:	2305      	movs	r3, #5
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x1e0>
 80012ea:	2306      	movs	r3, #6
 80012ec:	e004      	b.n	80012f8 <HAL_GPIO_Init+0x1e0>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_Init+0x1e0>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_GPIO_Init+0x1e0>
 80012f6:	2300      	movs	r3, #0
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	2103      	movs	r1, #3
 80012fc:	400a      	ands	r2, r1
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4093      	lsls	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001308:	4935      	ldr	r1, [pc, #212]	; (80013e0 <HAL_GPIO_Init+0x2c8>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001316:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <HAL_GPIO_Init+0x2d8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	43da      	mvns	r2, r3
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	025b      	lsls	r3, r3, #9
 800132e:	4013      	ands	r3, r2
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800133a:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <HAL_GPIO_Init+0x2d8>)
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001340:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <HAL_GPIO_Init+0x2d8>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	43da      	mvns	r2, r3
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	029b      	lsls	r3, r3, #10
 8001358:	4013      	ands	r3, r2
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <HAL_GPIO_Init+0x2d8>)
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <HAL_GPIO_Init+0x2d8>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43da      	mvns	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	035b      	lsls	r3, r3, #13
 8001382:	4013      	ands	r3, r2
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_GPIO_Init+0x2d8>)
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HAL_GPIO_Init+0x2d8>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43da      	mvns	r2, r3
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	039b      	lsls	r3, r3, #14
 80013ac:	4013      	ands	r3, r2
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013b8:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <HAL_GPIO_Init+0x2d8>)
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3301      	adds	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	40da      	lsrs	r2, r3
 80013cc:	1e13      	subs	r3, r2, #0
 80013ce:	d000      	beq.n	80013d2 <HAL_GPIO_Init+0x2ba>
 80013d0:	e6ae      	b.n	8001130 <HAL_GPIO_Init+0x18>
  }
}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b006      	add	sp, #24
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010000 	.word	0x40010000
 80013e4:	50000400 	.word	0x50000400
 80013e8:	50000800 	.word	0x50000800
 80013ec:	50001c00 	.word	0x50001c00
 80013f0:	40010400 	.word	0x40010400

080013f4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	0008      	movs	r0, r1
 80013fe:	0011      	movs	r1, r2
 8001400:	1cbb      	adds	r3, r7, #2
 8001402:	1c02      	adds	r2, r0, #0
 8001404:	801a      	strh	r2, [r3, #0]
 8001406:	1c7b      	adds	r3, r7, #1
 8001408:	1c0a      	adds	r2, r1, #0
 800140a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800140c:	1c7b      	adds	r3, r7, #1
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d004      	beq.n	800141e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001414:	1cbb      	adds	r3, r7, #2
 8001416:	881a      	ldrh	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800141c:	e003      	b.n	8001426 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800141e:	1cbb      	adds	r3, r7, #2
 8001420:	881a      	ldrh	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	46bd      	mov	sp, r7
 800142a:	b002      	add	sp, #8
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e082      	b.n	8001548 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2241      	movs	r2, #65	; 0x41
 8001446:	5c9b      	ldrb	r3, [r3, r2]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d107      	bne.n	800145e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2240      	movs	r2, #64	; 0x40
 8001452:	2100      	movs	r1, #0
 8001454:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	0018      	movs	r0, r3
 800145a:	f002 fc85 	bl	8003d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2241      	movs	r2, #65	; 0x41
 8001462:	2124      	movs	r1, #36	; 0x24
 8001464:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2101      	movs	r1, #1
 8001472:	438a      	bics	r2, r1
 8001474:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4934      	ldr	r1, [pc, #208]	; (8001550 <HAL_I2C_Init+0x120>)
 8001480:	400a      	ands	r2, r1
 8001482:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4931      	ldr	r1, [pc, #196]	; (8001554 <HAL_I2C_Init+0x124>)
 8001490:	400a      	ands	r2, r1
 8001492:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d108      	bne.n	80014ae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	0209      	lsls	r1, r1, #8
 80014a8:	430a      	orrs	r2, r1
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	e007      	b.n	80014be <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2184      	movs	r1, #132	; 0x84
 80014b8:	0209      	lsls	r1, r1, #8
 80014ba:	430a      	orrs	r2, r1
 80014bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d104      	bne.n	80014d0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2280      	movs	r2, #128	; 0x80
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	491f      	ldr	r1, [pc, #124]	; (8001558 <HAL_I2C_Init+0x128>)
 80014dc:	430a      	orrs	r2, r1
 80014de:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	491a      	ldr	r1, [pc, #104]	; (8001554 <HAL_I2C_Init+0x124>)
 80014ec:	400a      	ands	r2, r1
 80014ee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	431a      	orrs	r2, r3
 80014fa:	0011      	movs	r1, r2
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	021a      	lsls	r2, r3, #8
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69d9      	ldr	r1, [r3, #28]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1a      	ldr	r2, [r3, #32]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2101      	movs	r1, #1
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2241      	movs	r2, #65	; 0x41
 8001534:	2120      	movs	r1, #32
 8001536:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2242      	movs	r2, #66	; 0x42
 8001542:	2100      	movs	r1, #0
 8001544:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	0018      	movs	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	b002      	add	sp, #8
 800154e:	bd80      	pop	{r7, pc}
 8001550:	f0ffffff 	.word	0xf0ffffff
 8001554:	ffff7fff 	.word	0xffff7fff
 8001558:	02008000 	.word	0x02008000

0800155c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2241      	movs	r2, #65	; 0x41
 800156a:	5c9b      	ldrb	r3, [r3, r2]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b20      	cmp	r3, #32
 8001570:	d138      	bne.n	80015e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2240      	movs	r2, #64	; 0x40
 8001576:	5c9b      	ldrb	r3, [r3, r2]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800157c:	2302      	movs	r3, #2
 800157e:	e032      	b.n	80015e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2240      	movs	r2, #64	; 0x40
 8001584:	2101      	movs	r1, #1
 8001586:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2241      	movs	r2, #65	; 0x41
 800158c:	2124      	movs	r1, #36	; 0x24
 800158e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2101      	movs	r1, #1
 800159c:	438a      	bics	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4911      	ldr	r1, [pc, #68]	; (80015f0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6819      	ldr	r1, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2101      	movs	r1, #1
 80015cc:	430a      	orrs	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2241      	movs	r2, #65	; 0x41
 80015d4:	2120      	movs	r1, #32
 80015d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2240      	movs	r2, #64	; 0x40
 80015dc:	2100      	movs	r1, #0
 80015de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	e000      	b.n	80015e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015e4:	2302      	movs	r3, #2
  }
}
 80015e6:	0018      	movs	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b002      	add	sp, #8
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	ffffefff 	.word	0xffffefff

080015f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2241      	movs	r2, #65	; 0x41
 8001602:	5c9b      	ldrb	r3, [r3, r2]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b20      	cmp	r3, #32
 8001608:	d139      	bne.n	800167e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2240      	movs	r2, #64	; 0x40
 800160e:	5c9b      	ldrb	r3, [r3, r2]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d101      	bne.n	8001618 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001614:	2302      	movs	r3, #2
 8001616:	e033      	b.n	8001680 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2240      	movs	r2, #64	; 0x40
 800161c:	2101      	movs	r1, #1
 800161e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2241      	movs	r2, #65	; 0x41
 8001624:	2124      	movs	r1, #36	; 0x24
 8001626:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2101      	movs	r1, #1
 8001634:	438a      	bics	r2, r1
 8001636:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4a11      	ldr	r2, [pc, #68]	; (8001688 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4313      	orrs	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2101      	movs	r1, #1
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2241      	movs	r2, #65	; 0x41
 800166e:	2120      	movs	r1, #32
 8001670:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2240      	movs	r2, #64	; 0x40
 8001676:	2100      	movs	r1, #0
 8001678:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e000      	b.n	8001680 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800167e:	2302      	movs	r3, #2
  }
}
 8001680:	0018      	movs	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	b004      	add	sp, #16
 8001686:	bd80      	pop	{r7, pc}
 8001688:	fffff0ff 	.word	0xfffff0ff

0800168c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e06c      	b.n	8001778 <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	222e      	movs	r2, #46	; 0x2e
 80016a2:	5c9b      	ldrb	r3, [r3, r2]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d107      	bne.n	80016ba <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	222d      	movs	r2, #45	; 0x2d
 80016ae:	2100      	movs	r1, #0
 80016b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	0018      	movs	r0, r3
 80016b6:	f002 fb9b 	bl	8003df0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	222e      	movs	r2, #46	; 0x2e
 80016be:	2102      	movs	r1, #2
 80016c0:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d005      	beq.n	80016de <HAL_LPTIM_Init+0x52>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	041b      	lsls	r3, r3, #16
 80016da:	429a      	cmp	r2, r3
 80016dc:	d103      	bne.n	80016e6 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	221e      	movs	r2, #30
 80016e2:	4393      	bics	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	4a25      	ldr	r2, [pc, #148]	; (8001780 <HAL_LPTIM_Init+0xf4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d003      	beq.n	80016f8 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4a24      	ldr	r2, [pc, #144]	; (8001784 <HAL_LPTIM_Init+0xf8>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4a23      	ldr	r2, [pc, #140]	; (8001788 <HAL_LPTIM_Init+0xfc>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001708:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800170e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001714:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800171a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d005      	beq.n	8001736 <HAL_LPTIM_Init+0xaa>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	041b      	lsls	r3, r3, #16
 8001732:	429a      	cmp	r2, r3
 8001734:	d107      	bne.n	8001746 <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800173e:	4313      	orrs	r3, r2
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	4313      	orrs	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <HAL_LPTIM_Init+0xf4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d00a      	beq.n	8001766 <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001758:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800175e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4313      	orrs	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	222e      	movs	r2, #46	; 0x2e
 8001772:	2101      	movs	r1, #1
 8001774:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	b004      	add	sp, #16
 800177e:	bd80      	pop	{r7, pc}
 8001780:	0000ffff 	.word	0x0000ffff
 8001784:	ffff1f3f 	.word	0xffff1f3f
 8001788:	ff19f1f8 	.word	0xff19f1f8

0800178c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800178c:	b5b0      	push	{r4, r5, r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d102      	bne.n	80017a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	f000 fb6a 	bl	8001e74 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017a0:	4bc7      	ldr	r3, [pc, #796]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	220c      	movs	r2, #12
 80017a6:	4013      	ands	r3, r2
 80017a8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017aa:	4bc5      	ldr	r3, [pc, #788]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	025b      	lsls	r3, r3, #9
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2201      	movs	r2, #1
 80017bc:	4013      	ands	r3, r2
 80017be:	d100      	bne.n	80017c2 <HAL_RCC_OscConfig+0x36>
 80017c0:	e07d      	b.n	80018be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d007      	beq.n	80017d8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d112      	bne.n	80017f4 <HAL_RCC_OscConfig+0x68>
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	025b      	lsls	r3, r3, #9
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d10d      	bne.n	80017f4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	4bb9      	ldr	r3, [pc, #740]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	029b      	lsls	r3, r3, #10
 80017e0:	4013      	ands	r3, r2
 80017e2:	d100      	bne.n	80017e6 <HAL_RCC_OscConfig+0x5a>
 80017e4:	e06a      	b.n	80018bc <HAL_RCC_OscConfig+0x130>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d166      	bne.n	80018bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f000 fb40 	bl	8001e74 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	025b      	lsls	r3, r3, #9
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d107      	bne.n	8001810 <HAL_RCC_OscConfig+0x84>
 8001800:	4baf      	ldr	r3, [pc, #700]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4bae      	ldr	r3, [pc, #696]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	0249      	lsls	r1, r1, #9
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e027      	b.n	8001860 <HAL_RCC_OscConfig+0xd4>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	23a0      	movs	r3, #160	; 0xa0
 8001816:	02db      	lsls	r3, r3, #11
 8001818:	429a      	cmp	r2, r3
 800181a:	d10e      	bne.n	800183a <HAL_RCC_OscConfig+0xae>
 800181c:	4ba8      	ldr	r3, [pc, #672]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4ba7      	ldr	r3, [pc, #668]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	02c9      	lsls	r1, r1, #11
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	4ba5      	ldr	r3, [pc, #660]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4ba4      	ldr	r3, [pc, #656]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	0249      	lsls	r1, r1, #9
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e012      	b.n	8001860 <HAL_RCC_OscConfig+0xd4>
 800183a:	4ba1      	ldr	r3, [pc, #644]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4ba0      	ldr	r3, [pc, #640]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001840:	49a0      	ldr	r1, [pc, #640]	; (8001ac4 <HAL_RCC_OscConfig+0x338>)
 8001842:	400a      	ands	r2, r1
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	4b9e      	ldr	r3, [pc, #632]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	025b      	lsls	r3, r3, #9
 800184e:	4013      	ands	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4b9a      	ldr	r3, [pc, #616]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b99      	ldr	r3, [pc, #612]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 800185a:	499b      	ldr	r1, [pc, #620]	; (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 800185c:	400a      	ands	r2, r1
 800185e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d014      	beq.n	8001892 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7fe ff26 	bl	80006b8 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001872:	f7fe ff21 	bl	80006b8 <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b64      	cmp	r3, #100	; 0x64
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e2f7      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001884:	4b8e      	ldr	r3, [pc, #568]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	029b      	lsls	r3, r3, #10
 800188c:	4013      	ands	r3, r2
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0xe6>
 8001890:	e015      	b.n	80018be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7fe ff11 	bl	80006b8 <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800189c:	f7fe ff0c 	bl	80006b8 <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	; 0x64
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e2e2      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ae:	4b84      	ldr	r3, [pc, #528]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	029b      	lsls	r3, r3, #10
 80018b6:	4013      	ands	r3, r2
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x110>
 80018ba:	e000      	b.n	80018be <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2202      	movs	r2, #2
 80018c4:	4013      	ands	r3, r2
 80018c6:	d100      	bne.n	80018ca <HAL_RCC_OscConfig+0x13e>
 80018c8:	e098      	b.n	80019fc <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	2220      	movs	r2, #32
 80018d4:	4013      	ands	r3, r2
 80018d6:	d009      	beq.n	80018ec <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80018d8:	4b79      	ldr	r3, [pc, #484]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b78      	ldr	r3, [pc, #480]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 80018de:	2120      	movs	r1, #32
 80018e0:	430a      	orrs	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	2220      	movs	r2, #32
 80018e8:	4393      	bics	r3, r2
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d005      	beq.n	80018fe <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	2b0c      	cmp	r3, #12
 80018f6:	d13d      	bne.n	8001974 <HAL_RCC_OscConfig+0x1e8>
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d13a      	bne.n	8001974 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80018fe:	4b70      	ldr	r3, [pc, #448]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2204      	movs	r2, #4
 8001904:	4013      	ands	r3, r2
 8001906:	d004      	beq.n	8001912 <HAL_RCC_OscConfig+0x186>
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e2b0      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001912:	4b6b      	ldr	r3, [pc, #428]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4a6d      	ldr	r2, [pc, #436]	; (8001acc <HAL_RCC_OscConfig+0x340>)
 8001918:	4013      	ands	r3, r2
 800191a:	0019      	movs	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	021a      	lsls	r2, r3, #8
 8001922:	4b67      	ldr	r3, [pc, #412]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001924:	430a      	orrs	r2, r1
 8001926:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001928:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2209      	movs	r2, #9
 800192e:	4393      	bics	r3, r2
 8001930:	0019      	movs	r1, r3
 8001932:	4b63      	ldr	r3, [pc, #396]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193a:	f000 fbcb 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 800193e:	0001      	movs	r1, r0
 8001940:	4b5f      	ldr	r3, [pc, #380]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	220f      	movs	r2, #15
 8001948:	4013      	ands	r3, r2
 800194a:	4a61      	ldr	r2, [pc, #388]	; (8001ad0 <HAL_RCC_OscConfig+0x344>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	000a      	movs	r2, r1
 8001950:	40da      	lsrs	r2, r3
 8001952:	4b60      	ldr	r3, [pc, #384]	; (8001ad4 <HAL_RCC_OscConfig+0x348>)
 8001954:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001956:	2513      	movs	r5, #19
 8001958:	197c      	adds	r4, r7, r5
 800195a:	2000      	movs	r0, #0
 800195c:	f7fe fe76 	bl	800064c <HAL_InitTick>
 8001960:	0003      	movs	r3, r0
 8001962:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001964:	197b      	adds	r3, r7, r5
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d047      	beq.n	80019fc <HAL_RCC_OscConfig+0x270>
      {
        return status;
 800196c:	2313      	movs	r3, #19
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	e27f      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	2b00      	cmp	r3, #0
 8001978:	d027      	beq.n	80019ca <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800197a:	4b51      	ldr	r3, [pc, #324]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2209      	movs	r2, #9
 8001980:	4393      	bics	r3, r2
 8001982:	0019      	movs	r1, r3
 8001984:	4b4e      	ldr	r3, [pc, #312]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001988:	430a      	orrs	r2, r1
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7fe fe94 	bl	80006b8 <HAL_GetTick>
 8001990:	0003      	movs	r3, r0
 8001992:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001996:	f7fe fe8f 	bl	80006b8 <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e265      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019a8:	4b45      	ldr	r3, [pc, #276]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2204      	movs	r2, #4
 80019ae:	4013      	ands	r3, r2
 80019b0:	d0f1      	beq.n	8001996 <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b2:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a45      	ldr	r2, [pc, #276]	; (8001acc <HAL_RCC_OscConfig+0x340>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	0019      	movs	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	021a      	lsls	r2, r3, #8
 80019c2:	4b3f      	ldr	r3, [pc, #252]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 80019c4:	430a      	orrs	r2, r1
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	e018      	b.n	80019fc <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 80019d0:	2101      	movs	r1, #1
 80019d2:	438a      	bics	r2, r1
 80019d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d6:	f7fe fe6f 	bl	80006b8 <HAL_GetTick>
 80019da:	0003      	movs	r3, r0
 80019dc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e0:	f7fe fe6a 	bl	80006b8 <HAL_GetTick>
 80019e4:	0002      	movs	r2, r0
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e240      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019f2:	4b33      	ldr	r3, [pc, #204]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2204      	movs	r2, #4
 80019f8:	4013      	ands	r3, r2
 80019fa:	d1f1      	bne.n	80019e0 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2210      	movs	r2, #16
 8001a02:	4013      	ands	r3, r2
 8001a04:	d100      	bne.n	8001a08 <HAL_RCC_OscConfig+0x27c>
 8001a06:	e09e      	b.n	8001b46 <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d13f      	bne.n	8001a8e <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4013      	ands	r3, r2
 8001a18:	d005      	beq.n	8001a26 <HAL_RCC_OscConfig+0x29a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e226      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a26:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4a2b      	ldr	r2, [pc, #172]	; (8001ad8 <HAL_RCC_OscConfig+0x34c>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	0019      	movs	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1a      	ldr	r2, [r3, #32]
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001a36:	430a      	orrs	r2, r1
 8001a38:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	0a19      	lsrs	r1, r3, #8
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	061a      	lsls	r2, r3, #24
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	0b5b      	lsrs	r3, r3, #13
 8001a54:	3301      	adds	r3, #1
 8001a56:	2280      	movs	r2, #128	; 0x80
 8001a58:	0212      	lsls	r2, r2, #8
 8001a5a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	210f      	movs	r1, #15
 8001a64:	400b      	ands	r3, r1
 8001a66:	491a      	ldr	r1, [pc, #104]	; (8001ad0 <HAL_RCC_OscConfig+0x344>)
 8001a68:	5ccb      	ldrb	r3, [r1, r3]
 8001a6a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_RCC_OscConfig+0x348>)
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001a70:	2513      	movs	r5, #19
 8001a72:	197c      	adds	r4, r7, r5
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7fe fde9 	bl	800064c <HAL_InitTick>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001a7e:	197b      	adds	r3, r7, r5
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d05f      	beq.n	8001b46 <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 8001a86:	2313      	movs	r3, #19
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	e1f2      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d03d      	beq.n	8001b12 <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001a9c:	2180      	movs	r1, #128	; 0x80
 8001a9e:	0049      	lsls	r1, r1, #1
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7fe fe08 	bl	80006b8 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001aac:	e016      	b.n	8001adc <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aae:	f7fe fe03 	bl	80006b8 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d90f      	bls.n	8001adc <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e1d9      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	fffeffff 	.word	0xfffeffff
 8001ac8:	fffbffff 	.word	0xfffbffff
 8001acc:	ffffe0ff 	.word	0xffffe0ff
 8001ad0:	080041c0 	.word	0x080041c0
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001adc:	4bca      	ldr	r3, [pc, #808]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d0e2      	beq.n	8001aae <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ae8:	4bc7      	ldr	r3, [pc, #796]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	4ac7      	ldr	r2, [pc, #796]	; (8001e0c <HAL_RCC_OscConfig+0x680>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	0019      	movs	r1, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1a      	ldr	r2, [r3, #32]
 8001af6:	4bc4      	ldr	r3, [pc, #784]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001af8:	430a      	orrs	r2, r1
 8001afa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001afc:	4bc2      	ldr	r3, [pc, #776]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	0a19      	lsrs	r1, r3, #8
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	061a      	lsls	r2, r3, #24
 8001b0a:	4bbf      	ldr	r3, [pc, #764]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	e019      	b.n	8001b46 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b12:	4bbd      	ldr	r3, [pc, #756]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4bbc      	ldr	r3, [pc, #752]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001b18:	49bd      	ldr	r1, [pc, #756]	; (8001e10 <HAL_RCC_OscConfig+0x684>)
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7fe fdcb 	bl	80006b8 <HAL_GetTick>
 8001b22:	0003      	movs	r3, r0
 8001b24:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b28:	f7fe fdc6 	bl	80006b8 <HAL_GetTick>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e19c      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b3a:	4bb3      	ldr	r3, [pc, #716]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4013      	ands	r3, r2
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d036      	beq.n	8001bbe <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d019      	beq.n	8001b8c <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b58:	4bab      	ldr	r3, [pc, #684]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001b5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b5c:	4baa      	ldr	r3, [pc, #680]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001b5e:	2101      	movs	r1, #1
 8001b60:	430a      	orrs	r2, r1
 8001b62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7fe fda8 	bl	80006b8 <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6e:	f7fe fda3 	bl	80006b8 <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e179      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b80:	4ba1      	ldr	r3, [pc, #644]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b84:	2202      	movs	r2, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	d0f1      	beq.n	8001b6e <HAL_RCC_OscConfig+0x3e2>
 8001b8a:	e018      	b.n	8001bbe <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8c:	4b9e      	ldr	r3, [pc, #632]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001b8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b90:	4b9d      	ldr	r3, [pc, #628]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001b92:	2101      	movs	r1, #1
 8001b94:	438a      	bics	r2, r1
 8001b96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b98:	f7fe fd8e 	bl	80006b8 <HAL_GetTick>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba2:	f7fe fd89 	bl	80006b8 <HAL_GetTick>
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e15f      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bb4:	4b94      	ldr	r3, [pc, #592]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb8:	2202      	movs	r2, #2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d1f1      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d100      	bne.n	8001bca <HAL_RCC_OscConfig+0x43e>
 8001bc8:	e0af      	b.n	8001d2a <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bca:	2323      	movs	r3, #35	; 0x23
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd2:	4b8d      	ldr	r3, [pc, #564]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	055b      	lsls	r3, r3, #21
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d10a      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	4b8a      	ldr	r3, [pc, #552]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001be2:	4b89      	ldr	r3, [pc, #548]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	0549      	lsls	r1, r1, #21
 8001be8:	430a      	orrs	r2, r1
 8001bea:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001bec:	2323      	movs	r3, #35	; 0x23
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	4b87      	ldr	r3, [pc, #540]	; (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d11a      	bne.n	8001c36 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c00:	4b84      	ldr	r3, [pc, #528]	; (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b83      	ldr	r3, [pc, #524]	; (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	0049      	lsls	r1, r1, #1
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0e:	f7fe fd53 	bl	80006b8 <HAL_GetTick>
 8001c12:	0003      	movs	r3, r0
 8001c14:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c18:	f7fe fd4e 	bl	80006b8 <HAL_GetTick>
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	; 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e124      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2a:	4b7a      	ldr	r3, [pc, #488]	; (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4013      	ands	r3, r2
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_OscConfig+0x4c6>
 8001c42:	4b71      	ldr	r3, [pc, #452]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001c44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c46:	4b70      	ldr	r3, [pc, #448]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001c48:	2180      	movs	r1, #128	; 0x80
 8001c4a:	0049      	lsls	r1, r1, #1
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	651a      	str	r2, [r3, #80]	; 0x50
 8001c50:	e031      	b.n	8001cb6 <HAL_RCC_OscConfig+0x52a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x4e8>
 8001c5a:	4b6b      	ldr	r3, [pc, #428]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c5e:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001c60:	496b      	ldr	r1, [pc, #428]	; (8001e10 <HAL_RCC_OscConfig+0x684>)
 8001c62:	400a      	ands	r2, r1
 8001c64:	651a      	str	r2, [r3, #80]	; 0x50
 8001c66:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001c68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c6a:	4b67      	ldr	r3, [pc, #412]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001c6c:	496a      	ldr	r1, [pc, #424]	; (8001e18 <HAL_RCC_OscConfig+0x68c>)
 8001c6e:	400a      	ands	r2, r1
 8001c70:	651a      	str	r2, [r3, #80]	; 0x50
 8001c72:	e020      	b.n	8001cb6 <HAL_RCC_OscConfig+0x52a>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	23a0      	movs	r3, #160	; 0xa0
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d10e      	bne.n	8001c9e <HAL_RCC_OscConfig+0x512>
 8001c80:	4b61      	ldr	r3, [pc, #388]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001c82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c84:	4b60      	ldr	r3, [pc, #384]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	00c9      	lsls	r1, r1, #3
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	651a      	str	r2, [r3, #80]	; 0x50
 8001c8e:	4b5e      	ldr	r3, [pc, #376]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c92:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	0049      	lsls	r1, r1, #1
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	651a      	str	r2, [r3, #80]	; 0x50
 8001c9c:	e00b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x52a>
 8001c9e:	4b5a      	ldr	r3, [pc, #360]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001ca0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ca2:	4b59      	ldr	r3, [pc, #356]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001ca4:	495a      	ldr	r1, [pc, #360]	; (8001e10 <HAL_RCC_OscConfig+0x684>)
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	651a      	str	r2, [r3, #80]	; 0x50
 8001caa:	4b57      	ldr	r3, [pc, #348]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001cac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cae:	4b56      	ldr	r3, [pc, #344]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001cb0:	4959      	ldr	r1, [pc, #356]	; (8001e18 <HAL_RCC_OscConfig+0x68c>)
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d015      	beq.n	8001cea <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbe:	f7fe fcfb 	bl	80006b8 <HAL_GetTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cc6:	e009      	b.n	8001cdc <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc8:	f7fe fcf6 	bl	80006b8 <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	4a52      	ldr	r2, [pc, #328]	; (8001e1c <HAL_RCC_OscConfig+0x690>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e0cb      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cdc:	4b4a      	ldr	r3, [pc, #296]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001cde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d0ef      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x53c>
 8001ce8:	e014      	b.n	8001d14 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cea:	f7fe fce5 	bl	80006b8 <HAL_GetTick>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cf2:	e009      	b.n	8001d08 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf4:	f7fe fce0 	bl	80006b8 <HAL_GetTick>
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	4a47      	ldr	r2, [pc, #284]	; (8001e1c <HAL_RCC_OscConfig+0x690>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e0b5      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d08:	4b3f      	ldr	r3, [pc, #252]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001d0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4013      	ands	r3, r2
 8001d12:	d1ef      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d14:	2323      	movs	r3, #35	; 0x23
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d105      	bne.n	8001d2a <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1e:	4b3a      	ldr	r3, [pc, #232]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d22:	4b39      	ldr	r3, [pc, #228]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001d24:	493e      	ldr	r1, [pc, #248]	; (8001e20 <HAL_RCC_OscConfig+0x694>)
 8001d26:	400a      	ands	r2, r1
 8001d28:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d100      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5a8>
 8001d32:	e09e      	b.n	8001e72 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d100      	bne.n	8001d3c <HAL_RCC_OscConfig+0x5b0>
 8001d3a:	e077      	b.n	8001e2c <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d145      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d44:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001d4a:	4936      	ldr	r1, [pc, #216]	; (8001e24 <HAL_RCC_OscConfig+0x698>)
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7fe fcb2 	bl	80006b8 <HAL_GetTick>
 8001d54:	0003      	movs	r3, r0
 8001d56:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7fe fcad 	bl	80006b8 <HAL_GetTick>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e083      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d6c:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	049b      	lsls	r3, r3, #18
 8001d74:	4013      	ands	r3, r2
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d78:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4a2a      	ldr	r2, [pc, #168]	; (8001e28 <HAL_RCC_OscConfig+0x69c>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	431a      	orrs	r2, r3
 8001d92:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001d94:	430a      	orrs	r2, r1
 8001d96:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001d9e:	2180      	movs	r1, #128	; 0x80
 8001da0:	0449      	lsls	r1, r1, #17
 8001da2:	430a      	orrs	r2, r1
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7fe fc87 	bl	80006b8 <HAL_GetTick>
 8001daa:	0003      	movs	r3, r0
 8001dac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db0:	f7fe fc82 	bl	80006b8 <HAL_GetTick>
 8001db4:	0002      	movs	r2, r0
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e058      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	049b      	lsls	r3, r3, #18
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x624>
 8001dce:	e050      	b.n	8001e72 <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001dd6:	4913      	ldr	r1, [pc, #76]	; (8001e24 <HAL_RCC_OscConfig+0x698>)
 8001dd8:	400a      	ands	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7fe fc6c 	bl	80006b8 <HAL_GetTick>
 8001de0:	0003      	movs	r3, r0
 8001de2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de6:	f7fe fc67 	bl	80006b8 <HAL_GetTick>
 8001dea:	0002      	movs	r2, r0
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e03d      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	049b      	lsls	r3, r3, #18
 8001e00:	4013      	ands	r3, r2
 8001e02:	d1f0      	bne.n	8001de6 <HAL_RCC_OscConfig+0x65a>
 8001e04:	e035      	b.n	8001e72 <HAL_RCC_OscConfig+0x6e6>
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	ffff1fff 	.word	0xffff1fff
 8001e10:	fffffeff 	.word	0xfffffeff
 8001e14:	40007000 	.word	0x40007000
 8001e18:	fffffbff 	.word	0xfffffbff
 8001e1c:	00001388 	.word	0x00001388
 8001e20:	efffffff 	.word	0xefffffff
 8001e24:	feffffff 	.word	0xfeffffff
 8001e28:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e01d      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e38:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <HAL_RCC_OscConfig+0x6f0>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	025b      	lsls	r3, r3, #9
 8001e44:	401a      	ands	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d10f      	bne.n	8001e6e <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	23f0      	movs	r3, #240	; 0xf0
 8001e52:	039b      	lsls	r3, r3, #14
 8001e54:	401a      	ands	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	23c0      	movs	r3, #192	; 0xc0
 8001e62:	041b      	lsls	r3, r3, #16
 8001e64:	401a      	ands	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b00a      	add	sp, #40	; 0x28
 8001e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7c:	40021000 	.word	0x40021000

08001e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e80:	b5b0      	push	{r4, r5, r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e10d      	b.n	80020b0 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e94:	4b88      	ldr	r3, [pc, #544]	; (80020b8 <HAL_RCC_ClockConfig+0x238>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d911      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b85      	ldr	r3, [pc, #532]	; (80020b8 <HAL_RCC_ClockConfig+0x238>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4393      	bics	r3, r2
 8001eaa:	0019      	movs	r1, r3
 8001eac:	4b82      	ldr	r3, [pc, #520]	; (80020b8 <HAL_RCC_ClockConfig+0x238>)
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb4:	4b80      	ldr	r3, [pc, #512]	; (80020b8 <HAL_RCC_ClockConfig+0x238>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	4013      	ands	r3, r2
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0f4      	b.n	80020b0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d009      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed0:	4b7a      	ldr	r3, [pc, #488]	; (80020bc <HAL_RCC_ClockConfig+0x23c>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	22f0      	movs	r2, #240	; 0xf0
 8001ed6:	4393      	bics	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	4b77      	ldr	r3, [pc, #476]	; (80020bc <HAL_RCC_ClockConfig+0x23c>)
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4013      	ands	r3, r2
 8001eec:	d100      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x70>
 8001eee:	e089      	b.n	8002004 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ef8:	4b70      	ldr	r3, [pc, #448]	; (80020bc <HAL_RCC_ClockConfig+0x23c>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	029b      	lsls	r3, r3, #10
 8001f00:	4013      	ands	r3, r2
 8001f02:	d120      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0d3      	b.n	80020b0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f10:	4b6a      	ldr	r3, [pc, #424]	; (80020bc <HAL_RCC_ClockConfig+0x23c>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	049b      	lsls	r3, r3, #18
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d114      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0c7      	b.n	80020b0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d106      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f28:	4b64      	ldr	r3, [pc, #400]	; (80020bc <HAL_RCC_ClockConfig+0x23c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d109      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0bc      	b.n	80020b0 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f36:	4b61      	ldr	r3, [pc, #388]	; (80020bc <HAL_RCC_ClockConfig+0x23c>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0b4      	b.n	80020b0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f46:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_RCC_ClockConfig+0x23c>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	4393      	bics	r3, r2
 8001f4e:	0019      	movs	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4b59      	ldr	r3, [pc, #356]	; (80020bc <HAL_RCC_ClockConfig+0x23c>)
 8001f56:	430a      	orrs	r2, r1
 8001f58:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f5a:	f7fe fbad 	bl	80006b8 <HAL_GetTick>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d111      	bne.n	8001f8e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f6a:	e009      	b.n	8001f80 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6c:	f7fe fba4 	bl	80006b8 <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	4a52      	ldr	r2, [pc, #328]	; (80020c0 <HAL_RCC_ClockConfig+0x240>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e097      	b.n	80020b0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f80:	4b4e      	ldr	r3, [pc, #312]	; (80020bc <HAL_RCC_ClockConfig+0x23c>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	220c      	movs	r2, #12
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d1ef      	bne.n	8001f6c <HAL_RCC_ClockConfig+0xec>
 8001f8c:	e03a      	b.n	8002004 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d111      	bne.n	8001fba <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f96:	e009      	b.n	8001fac <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f98:	f7fe fb8e 	bl	80006b8 <HAL_GetTick>
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	4a47      	ldr	r2, [pc, #284]	; (80020c0 <HAL_RCC_ClockConfig+0x240>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e081      	b.n	80020b0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fac:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_RCC_ClockConfig+0x23c>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	220c      	movs	r2, #12
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b0c      	cmp	r3, #12
 8001fb6:	d1ef      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x118>
 8001fb8:	e024      	b.n	8002004 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d11b      	bne.n	8001ffa <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fc2:	e009      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f7fe fb78 	bl	80006b8 <HAL_GetTick>
 8001fc8:	0002      	movs	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	4a3c      	ldr	r2, [pc, #240]	; (80020c0 <HAL_RCC_ClockConfig+0x240>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e06b      	b.n	80020b0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fd8:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_RCC_ClockConfig+0x23c>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	220c      	movs	r2, #12
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d1ef      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x144>
 8001fe4:	e00e      	b.n	8002004 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe6:	f7fe fb67 	bl	80006b8 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	4a33      	ldr	r2, [pc, #204]	; (80020c0 <HAL_RCC_ClockConfig+0x240>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e05a      	b.n	80020b0 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ffa:	4b30      	ldr	r3, [pc, #192]	; (80020bc <HAL_RCC_ClockConfig+0x23c>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	220c      	movs	r2, #12
 8002000:	4013      	ands	r3, r2
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002004:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <HAL_RCC_ClockConfig+0x238>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d211      	bcs.n	8002036 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_RCC_ClockConfig+0x238>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2201      	movs	r2, #1
 8002018:	4393      	bics	r3, r2
 800201a:	0019      	movs	r1, r3
 800201c:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <HAL_RCC_ClockConfig+0x238>)
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_ClockConfig+0x238>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2201      	movs	r2, #1
 800202a:	4013      	ands	r3, r2
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d001      	beq.n	8002036 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e03c      	b.n	80020b0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2204      	movs	r2, #4
 800203c:	4013      	ands	r3, r2
 800203e:	d009      	beq.n	8002054 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <HAL_RCC_ClockConfig+0x23c>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <HAL_RCC_ClockConfig+0x244>)
 8002046:	4013      	ands	r3, r2
 8002048:	0019      	movs	r1, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_RCC_ClockConfig+0x23c>)
 8002050:	430a      	orrs	r2, r1
 8002052:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2208      	movs	r2, #8
 800205a:	4013      	ands	r3, r2
 800205c:	d00a      	beq.n	8002074 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <HAL_RCC_ClockConfig+0x23c>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <HAL_RCC_ClockConfig+0x248>)
 8002064:	4013      	ands	r3, r2
 8002066:	0019      	movs	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	00da      	lsls	r2, r3, #3
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_RCC_ClockConfig+0x23c>)
 8002070:	430a      	orrs	r2, r1
 8002072:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002074:	f000 f82e 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8002078:	0001      	movs	r1, r0
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_RCC_ClockConfig+0x23c>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	091b      	lsrs	r3, r3, #4
 8002080:	220f      	movs	r2, #15
 8002082:	4013      	ands	r3, r2
 8002084:	4a11      	ldr	r2, [pc, #68]	; (80020cc <HAL_RCC_ClockConfig+0x24c>)
 8002086:	5cd3      	ldrb	r3, [r2, r3]
 8002088:	000a      	movs	r2, r1
 800208a:	40da      	lsrs	r2, r3
 800208c:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <HAL_RCC_ClockConfig+0x250>)
 800208e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002090:	250b      	movs	r5, #11
 8002092:	197c      	adds	r4, r7, r5
 8002094:	2000      	movs	r0, #0
 8002096:	f7fe fad9 	bl	800064c <HAL_InitTick>
 800209a:	0003      	movs	r3, r0
 800209c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800209e:	197b      	adds	r3, r7, r5
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80020a6:	230b      	movs	r3, #11
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	e000      	b.n	80020b0 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	0018      	movs	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b004      	add	sp, #16
 80020b6:	bdb0      	pop	{r4, r5, r7, pc}
 80020b8:	40022000 	.word	0x40022000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	00001388 	.word	0x00001388
 80020c4:	fffff8ff 	.word	0xfffff8ff
 80020c8:	ffffc7ff 	.word	0xffffc7ff
 80020cc:	080041c0 	.word	0x080041c0
 80020d0:	20000000 	.word	0x20000000

080020d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80020da:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	220c      	movs	r2, #12
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d00e      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x34>
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d00f      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0x3a>
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d157      	bne.n	80021a2 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020f2:	4b35      	ldr	r3, [pc, #212]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2210      	movs	r2, #16
 80020f8:	4013      	ands	r3, r2
 80020fa:	d002      	beq.n	8002102 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80020fc:	4b33      	ldr	r3, [pc, #204]	; (80021cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80020fe:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002100:	e05d      	b.n	80021be <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8002102:	4b33      	ldr	r3, [pc, #204]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002104:	613b      	str	r3, [r7, #16]
      break;
 8002106:	e05a      	b.n	80021be <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002108:	4b32      	ldr	r3, [pc, #200]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x100>)
 800210a:	613b      	str	r3, [r7, #16]
      break;
 800210c:	e057      	b.n	80021be <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	0c9b      	lsrs	r3, r3, #18
 8002112:	220f      	movs	r2, #15
 8002114:	4013      	ands	r3, r2
 8002116:	4a30      	ldr	r2, [pc, #192]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	0d9b      	lsrs	r3, r3, #22
 8002120:	2203      	movs	r2, #3
 8002122:	4013      	ands	r3, r2
 8002124:	3301      	adds	r3, #1
 8002126:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002128:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	025b      	lsls	r3, r3, #9
 8002130:	4013      	ands	r3, r2
 8002132:	d00f      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	000a      	movs	r2, r1
 8002138:	0152      	lsls	r2, r2, #5
 800213a:	1a52      	subs	r2, r2, r1
 800213c:	0193      	lsls	r3, r2, #6
 800213e:	1a9b      	subs	r3, r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	185b      	adds	r3, r3, r1
 8002144:	025b      	lsls	r3, r3, #9
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	0018      	movs	r0, r3
 800214a:	f7fd ffdd 	bl	8000108 <__udivsi3>
 800214e:	0003      	movs	r3, r0
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	e023      	b.n	800219c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002154:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2210      	movs	r2, #16
 800215a:	4013      	ands	r3, r2
 800215c:	d00f      	beq.n	800217e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800215e:	68b9      	ldr	r1, [r7, #8]
 8002160:	000a      	movs	r2, r1
 8002162:	0152      	lsls	r2, r2, #5
 8002164:	1a52      	subs	r2, r2, r1
 8002166:	0193      	lsls	r3, r2, #6
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	185b      	adds	r3, r3, r1
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	0018      	movs	r0, r3
 8002174:	f7fd ffc8 	bl	8000108 <__udivsi3>
 8002178:	0003      	movs	r3, r0
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	e00e      	b.n	800219c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800217e:	68b9      	ldr	r1, [r7, #8]
 8002180:	000a      	movs	r2, r1
 8002182:	0152      	lsls	r2, r2, #5
 8002184:	1a52      	subs	r2, r2, r1
 8002186:	0193      	lsls	r3, r2, #6
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	185b      	adds	r3, r3, r1
 800218e:	029b      	lsls	r3, r3, #10
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	0018      	movs	r0, r3
 8002194:	f7fd ffb8 	bl	8000108 <__udivsi3>
 8002198:	0003      	movs	r3, r0
 800219a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	613b      	str	r3, [r7, #16]
      break;
 80021a0:	e00d      	b.n	80021be <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	0b5b      	lsrs	r3, r3, #13
 80021a8:	2207      	movs	r2, #7
 80021aa:	4013      	ands	r3, r2
 80021ac:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	3301      	adds	r3, #1
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	0212      	lsls	r2, r2, #8
 80021b6:	409a      	lsls	r2, r3
 80021b8:	0013      	movs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
      break;
 80021bc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021be:	693b      	ldr	r3, [r7, #16]
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b006      	add	sp, #24
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000
 80021cc:	003d0900 	.word	0x003d0900
 80021d0:	00f42400 	.word	0x00f42400
 80021d4:	007a1200 	.word	0x007a1200
 80021d8:	080041d8 	.word	0x080041d8

080021dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e0:	4b02      	ldr	r3, [pc, #8]	; (80021ec <HAL_RCC_GetHCLKFreq+0x10>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	20000000 	.word	0x20000000

080021f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021f4:	f7ff fff2 	bl	80021dc <HAL_RCC_GetHCLKFreq>
 80021f8:	0001      	movs	r1, r0
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	2207      	movs	r2, #7
 8002202:	4013      	ands	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	40d9      	lsrs	r1, r3
 800220a:	000b      	movs	r3, r1
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	40021000 	.word	0x40021000
 8002218:	080041d0 	.word	0x080041d0

0800221c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002220:	f7ff ffdc 	bl	80021dc <HAL_RCC_GetHCLKFreq>
 8002224:	0001      	movs	r1, r0
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	0adb      	lsrs	r3, r3, #11
 800222c:	2207      	movs	r2, #7
 800222e:	4013      	ands	r3, r2
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	40d9      	lsrs	r1, r3
 8002236:	000b      	movs	r3, r1
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	40021000 	.word	0x40021000
 8002244:	080041d0 	.word	0x080041d0

08002248 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2220      	movs	r2, #32
 8002256:	4013      	ands	r3, r2
 8002258:	d100      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x14>
 800225a:	e0c7      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800225c:	2317      	movs	r3, #23
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002264:	4b82      	ldr	r3, [pc, #520]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	055b      	lsls	r3, r3, #21
 800226c:	4013      	ands	r3, r2
 800226e:	d10a      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002270:	4b7f      	ldr	r3, [pc, #508]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002274:	4b7e      	ldr	r3, [pc, #504]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002276:	2180      	movs	r1, #128	; 0x80
 8002278:	0549      	lsls	r1, r1, #21
 800227a:	430a      	orrs	r2, r1
 800227c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800227e:	2317      	movs	r3, #23
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	4b7b      	ldr	r3, [pc, #492]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4013      	ands	r3, r2
 8002290:	d11a      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002292:	4b78      	ldr	r3, [pc, #480]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	4b77      	ldr	r3, [pc, #476]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002298:	2180      	movs	r1, #128	; 0x80
 800229a:	0049      	lsls	r1, r1, #1
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a0:	f7fe fa0a 	bl	80006b8 <HAL_GetTick>
 80022a4:	0003      	movs	r3, r0
 80022a6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	e008      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022aa:	f7fe fa05 	bl	80006b8 <HAL_GetTick>
 80022ae:	0002      	movs	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b64      	cmp	r3, #100	; 0x64
 80022b6:	d901      	bls.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e0d4      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022bc:	4b6d      	ldr	r3, [pc, #436]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4013      	ands	r3, r2
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80022c8:	4b69      	ldr	r3, [pc, #420]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	23c0      	movs	r3, #192	; 0xc0
 80022ce:	039b      	lsls	r3, r3, #14
 80022d0:	4013      	ands	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	23c0      	movs	r3, #192	; 0xc0
 80022da:	039b      	lsls	r3, r3, #14
 80022dc:	4013      	ands	r3, r2
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d013      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	23c0      	movs	r3, #192	; 0xc0
 80022ea:	029b      	lsls	r3, r3, #10
 80022ec:	401a      	ands	r2, r3
 80022ee:	23c0      	movs	r3, #192	; 0xc0
 80022f0:	029b      	lsls	r3, r3, #10
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d10a      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80022f6:	4b5e      	ldr	r3, [pc, #376]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	029b      	lsls	r3, r3, #10
 80022fe:	401a      	ands	r2, r3
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	029b      	lsls	r3, r3, #10
 8002304:	429a      	cmp	r2, r3
 8002306:	d101      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0ac      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800230c:	4b58      	ldr	r3, [pc, #352]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800230e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002310:	23c0      	movs	r3, #192	; 0xc0
 8002312:	029b      	lsls	r3, r3, #10
 8002314:	4013      	ands	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d03b      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	23c0      	movs	r3, #192	; 0xc0
 8002324:	029b      	lsls	r3, r3, #10
 8002326:	4013      	ands	r3, r2
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	429a      	cmp	r2, r3
 800232c:	d033      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2220      	movs	r2, #32
 8002334:	4013      	ands	r3, r2
 8002336:	d02e      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002338:	4b4d      	ldr	r3, [pc, #308]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800233a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800233c:	4a4e      	ldr	r2, [pc, #312]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800233e:	4013      	ands	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002342:	4b4b      	ldr	r3, [pc, #300]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002346:	4b4a      	ldr	r3, [pc, #296]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002348:	2180      	movs	r1, #128	; 0x80
 800234a:	0309      	lsls	r1, r1, #12
 800234c:	430a      	orrs	r2, r1
 800234e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002350:	4b47      	ldr	r3, [pc, #284]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002352:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002354:	4b46      	ldr	r3, [pc, #280]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002356:	4949      	ldr	r1, [pc, #292]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002358:	400a      	ands	r2, r1
 800235a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800235c:	4b44      	ldr	r3, [pc, #272]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4013      	ands	r3, r2
 800236a:	d014      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7fe f9a4 	bl	80006b8 <HAL_GetTick>
 8002370:	0003      	movs	r3, r0
 8002372:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002374:	e009      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002376:	f7fe f99f 	bl	80006b8 <HAL_GetTick>
 800237a:	0002      	movs	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	4a3f      	ldr	r2, [pc, #252]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e06d      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800238a:	4b39      	ldr	r3, [pc, #228]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800238c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4013      	ands	r3, r2
 8002394:	d0ef      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	23c0      	movs	r3, #192	; 0xc0
 800239c:	029b      	lsls	r3, r3, #10
 800239e:	401a      	ands	r2, r3
 80023a0:	23c0      	movs	r3, #192	; 0xc0
 80023a2:	029b      	lsls	r3, r3, #10
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d10c      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80023a8:	4b31      	ldr	r3, [pc, #196]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a35      	ldr	r2, [pc, #212]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	0019      	movs	r1, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	23c0      	movs	r3, #192	; 0xc0
 80023b8:	039b      	lsls	r3, r3, #14
 80023ba:	401a      	ands	r2, r3
 80023bc:	4b2c      	ldr	r3, [pc, #176]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023be:	430a      	orrs	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	23c0      	movs	r3, #192	; 0xc0
 80023cc:	029b      	lsls	r3, r3, #10
 80023ce:	401a      	ands	r2, r3
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023d2:	430a      	orrs	r2, r1
 80023d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023d6:	2317      	movs	r3, #23
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e0:	4b23      	ldr	r3, [pc, #140]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023e4:	4b22      	ldr	r3, [pc, #136]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023e6:	4928      	ldr	r1, [pc, #160]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2202      	movs	r2, #2
 80023f2:	4013      	ands	r3, r2
 80023f4:	d009      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023f6:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	220c      	movs	r2, #12
 80023fc:	4393      	bics	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002406:	430a      	orrs	r2, r1
 8002408:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2204      	movs	r2, #4
 8002410:	4013      	ands	r3, r2
 8002412:	d009      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002414:	4b16      	ldr	r3, [pc, #88]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002418:	4a1c      	ldr	r2, [pc, #112]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800241a:	4013      	ands	r3, r2
 800241c:	0019      	movs	r1, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002424:	430a      	orrs	r2, r1
 8002426:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2208      	movs	r2, #8
 800242e:	4013      	ands	r3, r2
 8002430:	d009      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	4a16      	ldr	r2, [pc, #88]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002438:	4013      	ands	r3, r2
 800243a:	0019      	movs	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002442:	430a      	orrs	r2, r1
 8002444:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	4013      	ands	r3, r2
 800244e:	d009      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002454:	4a0f      	ldr	r2, [pc, #60]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002456:	4013      	ands	r3, r2
 8002458:	0019      	movs	r1, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002460:	430a      	orrs	r2, r1
 8002462:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	0018      	movs	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	b006      	add	sp, #24
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	40021000 	.word	0x40021000
 8002474:	40007000 	.word	0x40007000
 8002478:	fffcffff 	.word	0xfffcffff
 800247c:	fff7ffff 	.word	0xfff7ffff
 8002480:	00001388 	.word	0x00001388
 8002484:	ffcfffff 	.word	0xffcfffff
 8002488:	efffffff 	.word	0xefffffff
 800248c:	fffff3ff 	.word	0xfffff3ff
 8002490:	ffffcfff 	.word	0xffffcfff
 8002494:	fff3ffff 	.word	0xfff3ffff

08002498 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e01e      	b.n	80024e8 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2239      	movs	r2, #57	; 0x39
 80024ae:	5c9b      	ldrb	r3, [r3, r2]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d107      	bne.n	80024c6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2238      	movs	r2, #56	; 0x38
 80024ba:	2100      	movs	r1, #0
 80024bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f001 fcad 	bl	8003e20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2239      	movs	r2, #57	; 0x39
 80024ca:	2102      	movs	r1, #2
 80024cc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3304      	adds	r3, #4
 80024d6:	0019      	movs	r1, r3
 80024d8:	0010      	movs	r0, r2
 80024da:	f000 f8c1 	bl	8002660 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2239      	movs	r2, #57	; 0x39
 80024e2:	2101      	movs	r1, #1
 80024e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b002      	add	sp, #8
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2238      	movs	r2, #56	; 0x38
 8002500:	5c9b      	ldrb	r3, [r3, r2]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002506:	2302      	movs	r3, #2
 8002508:	e0a4      	b.n	8002654 <HAL_TIM_PWM_ConfigChannel+0x164>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2238      	movs	r2, #56	; 0x38
 800250e:	2101      	movs	r1, #1
 8002510:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2239      	movs	r2, #57	; 0x39
 8002516:	2102      	movs	r1, #2
 8002518:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b04      	cmp	r3, #4
 800251e:	d029      	beq.n	8002574 <HAL_TIM_PWM_ConfigChannel+0x84>
 8002520:	d802      	bhi.n	8002528 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002526:	e08c      	b.n	8002642 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002528:	2b08      	cmp	r3, #8
 800252a:	d046      	beq.n	80025ba <HAL_TIM_PWM_ConfigChannel+0xca>
 800252c:	2b0c      	cmp	r3, #12
 800252e:	d065      	beq.n	80025fc <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002530:	e087      	b.n	8002642 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	0011      	movs	r1, r2
 800253a:	0018      	movs	r0, r3
 800253c:	f000 f8e4 	bl	8002708 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2108      	movs	r1, #8
 800254c:	430a      	orrs	r2, r1
 800254e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2104      	movs	r1, #4
 800255c:	438a      	bics	r2, r1
 800255e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6999      	ldr	r1, [r3, #24]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	619a      	str	r2, [r3, #24]
      break;
 8002572:	e066      	b.n	8002642 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	0011      	movs	r1, r2
 800257c:	0018      	movs	r0, r3
 800257e:	f000 f8ff 	bl	8002780 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	0109      	lsls	r1, r1, #4
 8002590:	430a      	orrs	r2, r1
 8002592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	492f      	ldr	r1, [pc, #188]	; (800265c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80025a0:	400a      	ands	r2, r1
 80025a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6999      	ldr	r1, [r3, #24]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	021a      	lsls	r2, r3, #8
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	619a      	str	r2, [r3, #24]
      break;
 80025b8:	e043      	b.n	8002642 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	0011      	movs	r1, r2
 80025c2:	0018      	movs	r0, r3
 80025c4:	f000 f91e 	bl	8002804 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2108      	movs	r1, #8
 80025d4:	430a      	orrs	r2, r1
 80025d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69da      	ldr	r2, [r3, #28]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2104      	movs	r1, #4
 80025e4:	438a      	bics	r2, r1
 80025e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69d9      	ldr	r1, [r3, #28]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	61da      	str	r2, [r3, #28]
      break;
 80025fa:	e022      	b.n	8002642 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	0011      	movs	r1, r2
 8002604:	0018      	movs	r0, r3
 8002606:	f000 f93d 	bl	8002884 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69da      	ldr	r2, [r3, #28]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	0109      	lsls	r1, r1, #4
 8002618:	430a      	orrs	r2, r1
 800261a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	490d      	ldr	r1, [pc, #52]	; (800265c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002628:	400a      	ands	r2, r1
 800262a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69d9      	ldr	r1, [r3, #28]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	021a      	lsls	r2, r3, #8
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	61da      	str	r2, [r3, #28]
      break;
 8002640:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2239      	movs	r2, #57	; 0x39
 8002646:	2101      	movs	r1, #1
 8002648:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2238      	movs	r2, #56	; 0x38
 800264e:	2100      	movs	r1, #0
 8002650:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	0018      	movs	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	b004      	add	sp, #16
 800265a:	bd80      	pop	{r7, pc}
 800265c:	fffffbff 	.word	0xfffffbff

08002660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	05db      	lsls	r3, r3, #23
 8002676:	429a      	cmp	r2, r3
 8002678:	d007      	beq.n	800268a <TIM_Base_SetConfig+0x2a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a1f      	ldr	r2, [pc, #124]	; (80026fc <TIM_Base_SetConfig+0x9c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d003      	beq.n	800268a <TIM_Base_SetConfig+0x2a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a1e      	ldr	r2, [pc, #120]	; (8002700 <TIM_Base_SetConfig+0xa0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d108      	bne.n	800269c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2270      	movs	r2, #112	; 0x70
 800268e:	4393      	bics	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	05db      	lsls	r3, r3, #23
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d007      	beq.n	80026b6 <TIM_Base_SetConfig+0x56>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a14      	ldr	r2, [pc, #80]	; (80026fc <TIM_Base_SetConfig+0x9c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d003      	beq.n	80026b6 <TIM_Base_SetConfig+0x56>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a13      	ldr	r2, [pc, #76]	; (8002700 <TIM_Base_SetConfig+0xa0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d108      	bne.n	80026c8 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4a12      	ldr	r2, [pc, #72]	; (8002704 <TIM_Base_SetConfig+0xa4>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	4393      	bics	r3, r2
 80026ce:	001a      	movs	r2, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	615a      	str	r2, [r3, #20]
}
 80026f4:	46c0      	nop			; (mov r8, r8)
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b004      	add	sp, #16
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40010800 	.word	0x40010800
 8002700:	40011400 	.word	0x40011400
 8002704:	fffffcff 	.word	0xfffffcff

08002708 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	2201      	movs	r2, #1
 8002718:	4393      	bics	r3, r2
 800271a:	001a      	movs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2270      	movs	r2, #112	; 0x70
 8002736:	4393      	bics	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2203      	movs	r2, #3
 800273e:	4393      	bics	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2202      	movs	r2, #2
 8002750:	4393      	bics	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	621a      	str	r2, [r3, #32]
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b006      	add	sp, #24
 800277e:	bd80      	pop	{r7, pc}

08002780 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	2210      	movs	r2, #16
 8002790:	4393      	bics	r3, r2
 8002792:	001a      	movs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4a13      	ldr	r2, [pc, #76]	; (80027fc <TIM_OC2_SetConfig+0x7c>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4a12      	ldr	r2, [pc, #72]	; (8002800 <TIM_OC2_SetConfig+0x80>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2220      	movs	r2, #32
 80027ca:	4393      	bics	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	621a      	str	r2, [r3, #32]
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b006      	add	sp, #24
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	ffff8fff 	.word	0xffff8fff
 8002800:	fffffcff 	.word	0xfffffcff

08002804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4a1a      	ldr	r2, [pc, #104]	; (800287c <TIM_OC3_SetConfig+0x78>)
 8002814:	401a      	ands	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2270      	movs	r2, #112	; 0x70
 8002830:	4393      	bics	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2203      	movs	r2, #3
 8002838:	4393      	bics	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <TIM_OC3_SetConfig+0x7c>)
 800284a:	4013      	ands	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	621a      	str	r2, [r3, #32]
}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	b006      	add	sp, #24
 800287a:	bd80      	pop	{r7, pc}
 800287c:	fffffeff 	.word	0xfffffeff
 8002880:	fffffdff 	.word	0xfffffdff

08002884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <TIM_OC4_SetConfig+0x7c>)
 8002894:	401a      	ands	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a15      	ldr	r2, [pc, #84]	; (8002904 <TIM_OC4_SetConfig+0x80>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4a14      	ldr	r2, [pc, #80]	; (8002908 <TIM_OC4_SetConfig+0x84>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	4a10      	ldr	r2, [pc, #64]	; (800290c <TIM_OC4_SetConfig+0x88>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	031b      	lsls	r3, r3, #12
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	621a      	str	r2, [r3, #32]
}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b006      	add	sp, #24
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	ffffefff 	.word	0xffffefff
 8002904:	ffff8fff 	.word	0xffff8fff
 8002908:	fffffcff 	.word	0xfffffcff
 800290c:	ffffdfff 	.word	0xffffdfff

08002910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2238      	movs	r2, #56	; 0x38
 800291e:	5c9b      	ldrb	r3, [r3, r2]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002924:	2302      	movs	r3, #2
 8002926:	e032      	b.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2238      	movs	r2, #56	; 0x38
 800292c:	2101      	movs	r1, #1
 800292e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2239      	movs	r2, #57	; 0x39
 8002934:	2102      	movs	r1, #2
 8002936:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2270      	movs	r2, #112	; 0x70
 800294c:	4393      	bics	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	4393      	bics	r3, r2
 8002960:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	4313      	orrs	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2239      	movs	r2, #57	; 0x39
 8002980:	2101      	movs	r1, #1
 8002982:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2238      	movs	r2, #56	; 0x38
 8002988:	2100      	movs	r1, #0
 800298a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	0018      	movs	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	b004      	add	sp, #16
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e044      	b.n	8002a34 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d107      	bne.n	80029c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2270      	movs	r2, #112	; 0x70
 80029b6:	2100      	movs	r1, #0
 80029b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	0018      	movs	r0, r3
 80029be:	f001 fadd 	bl	8003f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2224      	movs	r2, #36	; 0x24
 80029c6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2101      	movs	r1, #1
 80029d4:	438a      	bics	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 f830 	bl	8002a40 <UART_SetConfig>
 80029e0:	0003      	movs	r3, r0
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e024      	b.n	8002a34 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 fafd 	bl	8002ff4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	490d      	ldr	r1, [pc, #52]	; (8002a3c <HAL_UART_Init+0xa4>)
 8002a06:	400a      	ands	r2, r1
 8002a08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	212a      	movs	r1, #42	; 0x2a
 8002a16:	438a      	bics	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2101      	movs	r1, #1
 8002a26:	430a      	orrs	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f000 fb95 	bl	800315c <UART_CheckIdleState>
 8002a32:	0003      	movs	r3, r0
}
 8002a34:	0018      	movs	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b002      	add	sp, #8
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	ffffb7ff 	.word	0xffffb7ff

08002a40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a40:	b5b0      	push	{r4, r5, r7, lr}
 8002a42:	b08e      	sub	sp, #56	; 0x38
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002a48:	231b      	movs	r3, #27
 8002a4a:	2218      	movs	r2, #24
 8002a4c:	4694      	mov	ip, r2
 8002a4e:	44bc      	add	ip, r7
 8002a50:	4463      	add	r3, ip
 8002a52:	2210      	movs	r2, #16
 8002a54:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a5a:	2313      	movs	r3, #19
 8002a5c:	2218      	movs	r2, #24
 8002a5e:	4694      	mov	ip, r2
 8002a60:	44bc      	add	ip, r7
 8002a62:	4463      	add	r3, ip
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4ace      	ldr	r2, [pc, #824]	; (8002dc4 <UART_SetConfig+0x384>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a96:	430a      	orrs	r2, r1
 8002a98:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4ac9      	ldr	r2, [pc, #804]	; (8002dc8 <UART_SetConfig+0x388>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	0019      	movs	r1, r3
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4ac3      	ldr	r2, [pc, #780]	; (8002dcc <UART_SetConfig+0x38c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d004      	beq.n	8002acc <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	4abf      	ldr	r2, [pc, #764]	; (8002dd0 <UART_SetConfig+0x390>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4abb      	ldr	r2, [pc, #748]	; (8002dd4 <UART_SetConfig+0x394>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d137      	bne.n	8002b5c <UART_SetConfig+0x11c>
 8002aec:	4bba      	ldr	r3, [pc, #744]	; (8002dd8 <UART_SetConfig+0x398>)
 8002aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af0:	220c      	movs	r2, #12
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d018      	beq.n	8002b2a <UART_SetConfig+0xea>
 8002af8:	d802      	bhi.n	8002b00 <UART_SetConfig+0xc0>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <UART_SetConfig+0xca>
 8002afe:	e024      	b.n	8002b4a <UART_SetConfig+0x10a>
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d00a      	beq.n	8002b1a <UART_SetConfig+0xda>
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	d018      	beq.n	8002b3a <UART_SetConfig+0xfa>
 8002b08:	e01f      	b.n	8002b4a <UART_SetConfig+0x10a>
 8002b0a:	231b      	movs	r3, #27
 8002b0c:	2218      	movs	r2, #24
 8002b0e:	4694      	mov	ip, r2
 8002b10:	44bc      	add	ip, r7
 8002b12:	4463      	add	r3, ip
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
 8002b18:	e06e      	b.n	8002bf8 <UART_SetConfig+0x1b8>
 8002b1a:	231b      	movs	r3, #27
 8002b1c:	2218      	movs	r2, #24
 8002b1e:	4694      	mov	ip, r2
 8002b20:	44bc      	add	ip, r7
 8002b22:	4463      	add	r3, ip
 8002b24:	2202      	movs	r2, #2
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	e066      	b.n	8002bf8 <UART_SetConfig+0x1b8>
 8002b2a:	231b      	movs	r3, #27
 8002b2c:	2218      	movs	r2, #24
 8002b2e:	4694      	mov	ip, r2
 8002b30:	44bc      	add	ip, r7
 8002b32:	4463      	add	r3, ip
 8002b34:	2204      	movs	r2, #4
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	e05e      	b.n	8002bf8 <UART_SetConfig+0x1b8>
 8002b3a:	231b      	movs	r3, #27
 8002b3c:	2218      	movs	r2, #24
 8002b3e:	4694      	mov	ip, r2
 8002b40:	44bc      	add	ip, r7
 8002b42:	4463      	add	r3, ip
 8002b44:	2208      	movs	r2, #8
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	e056      	b.n	8002bf8 <UART_SetConfig+0x1b8>
 8002b4a:	231b      	movs	r3, #27
 8002b4c:	2218      	movs	r2, #24
 8002b4e:	4694      	mov	ip, r2
 8002b50:	44bc      	add	ip, r7
 8002b52:	4463      	add	r3, ip
 8002b54:	2210      	movs	r2, #16
 8002b56:	701a      	strb	r2, [r3, #0]
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	e04d      	b.n	8002bf8 <UART_SetConfig+0x1b8>
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a9a      	ldr	r2, [pc, #616]	; (8002dcc <UART_SetConfig+0x38c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d141      	bne.n	8002bea <UART_SetConfig+0x1aa>
 8002b66:	4b9c      	ldr	r3, [pc, #624]	; (8002dd8 <UART_SetConfig+0x398>)
 8002b68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b6a:	23c0      	movs	r3, #192	; 0xc0
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2280      	movs	r2, #128	; 0x80
 8002b72:	00d2      	lsls	r2, r2, #3
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d01f      	beq.n	8002bb8 <UART_SetConfig+0x178>
 8002b78:	2280      	movs	r2, #128	; 0x80
 8002b7a:	00d2      	lsls	r2, r2, #3
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d802      	bhi.n	8002b86 <UART_SetConfig+0x146>
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d009      	beq.n	8002b98 <UART_SetConfig+0x158>
 8002b84:	e028      	b.n	8002bd8 <UART_SetConfig+0x198>
 8002b86:	2280      	movs	r2, #128	; 0x80
 8002b88:	0112      	lsls	r2, r2, #4
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00c      	beq.n	8002ba8 <UART_SetConfig+0x168>
 8002b8e:	22c0      	movs	r2, #192	; 0xc0
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d018      	beq.n	8002bc8 <UART_SetConfig+0x188>
 8002b96:	e01f      	b.n	8002bd8 <UART_SetConfig+0x198>
 8002b98:	231b      	movs	r3, #27
 8002b9a:	2218      	movs	r2, #24
 8002b9c:	4694      	mov	ip, r2
 8002b9e:	44bc      	add	ip, r7
 8002ba0:	4463      	add	r3, ip
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	e027      	b.n	8002bf8 <UART_SetConfig+0x1b8>
 8002ba8:	231b      	movs	r3, #27
 8002baa:	2218      	movs	r2, #24
 8002bac:	4694      	mov	ip, r2
 8002bae:	44bc      	add	ip, r7
 8002bb0:	4463      	add	r3, ip
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	701a      	strb	r2, [r3, #0]
 8002bb6:	e01f      	b.n	8002bf8 <UART_SetConfig+0x1b8>
 8002bb8:	231b      	movs	r3, #27
 8002bba:	2218      	movs	r2, #24
 8002bbc:	4694      	mov	ip, r2
 8002bbe:	44bc      	add	ip, r7
 8002bc0:	4463      	add	r3, ip
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	e017      	b.n	8002bf8 <UART_SetConfig+0x1b8>
 8002bc8:	231b      	movs	r3, #27
 8002bca:	2218      	movs	r2, #24
 8002bcc:	4694      	mov	ip, r2
 8002bce:	44bc      	add	ip, r7
 8002bd0:	4463      	add	r3, ip
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e00f      	b.n	8002bf8 <UART_SetConfig+0x1b8>
 8002bd8:	231b      	movs	r3, #27
 8002bda:	2218      	movs	r2, #24
 8002bdc:	4694      	mov	ip, r2
 8002bde:	44bc      	add	ip, r7
 8002be0:	4463      	add	r3, ip
 8002be2:	2210      	movs	r2, #16
 8002be4:	701a      	strb	r2, [r3, #0]
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	e006      	b.n	8002bf8 <UART_SetConfig+0x1b8>
 8002bea:	231b      	movs	r3, #27
 8002bec:	2218      	movs	r2, #24
 8002bee:	4694      	mov	ip, r2
 8002bf0:	44bc      	add	ip, r7
 8002bf2:	4463      	add	r3, ip
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a73      	ldr	r2, [pc, #460]	; (8002dcc <UART_SetConfig+0x38c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d000      	beq.n	8002c04 <UART_SetConfig+0x1c4>
 8002c02:	e083      	b.n	8002d0c <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c04:	231b      	movs	r3, #27
 8002c06:	2218      	movs	r2, #24
 8002c08:	4694      	mov	ip, r2
 8002c0a:	44bc      	add	ip, r7
 8002c0c:	4463      	add	r3, ip
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d00d      	beq.n	8002c30 <UART_SetConfig+0x1f0>
 8002c14:	dc02      	bgt.n	8002c1c <UART_SetConfig+0x1dc>
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <UART_SetConfig+0x1e6>
 8002c1a:	e01d      	b.n	8002c58 <UART_SetConfig+0x218>
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d012      	beq.n	8002c46 <UART_SetConfig+0x206>
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d015      	beq.n	8002c50 <UART_SetConfig+0x210>
 8002c24:	e018      	b.n	8002c58 <UART_SetConfig+0x218>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002c26:	f7ff fae3 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c2e:	e01b      	b.n	8002c68 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c30:	4b69      	ldr	r3, [pc, #420]	; (8002dd8 <UART_SetConfig+0x398>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2210      	movs	r2, #16
 8002c36:	4013      	ands	r3, r2
 8002c38:	d002      	beq.n	8002c40 <UART_SetConfig+0x200>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8002c3a:	4b68      	ldr	r3, [pc, #416]	; (8002ddc <UART_SetConfig+0x39c>)
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8002c3e:	e013      	b.n	8002c68 <UART_SetConfig+0x228>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002c40:	4b67      	ldr	r3, [pc, #412]	; (8002de0 <UART_SetConfig+0x3a0>)
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c44:	e010      	b.n	8002c68 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002c46:	f7ff fa45 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c4e:	e00b      	b.n	8002c68 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c56:	e007      	b.n	8002c68 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002c58:	2313      	movs	r3, #19
 8002c5a:	2218      	movs	r2, #24
 8002c5c:	4694      	mov	ip, r2
 8002c5e:	44bc      	add	ip, r7
 8002c60:	4463      	add	r3, ip
 8002c62:	2201      	movs	r2, #1
 8002c64:	701a      	strb	r2, [r3, #0]
        break;
 8002c66:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d100      	bne.n	8002c70 <UART_SetConfig+0x230>
 8002c6e:	e1a7      	b.n	8002fc0 <UART_SetConfig+0x580>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	0013      	movs	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	189b      	adds	r3, r3, r2
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d305      	bcc.n	8002c8c <UART_SetConfig+0x24c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d907      	bls.n	8002c9c <UART_SetConfig+0x25c>
      {
        ret = HAL_ERROR;
 8002c8c:	2313      	movs	r3, #19
 8002c8e:	2218      	movs	r2, #24
 8002c90:	4694      	mov	ip, r2
 8002c92:	44bc      	add	ip, r7
 8002c94:	4463      	add	r3, ip
 8002c96:	2201      	movs	r2, #1
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	e191      	b.n	8002fc0 <UART_SetConfig+0x580>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	6939      	ldr	r1, [r7, #16]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	000b      	movs	r3, r1
 8002caa:	0e1b      	lsrs	r3, r3, #24
 8002cac:	0010      	movs	r0, r2
 8002cae:	0205      	lsls	r5, r0, #8
 8002cb0:	431d      	orrs	r5, r3
 8002cb2:	000b      	movs	r3, r1
 8002cb4:	021c      	lsls	r4, r3, #8
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	085b      	lsrs	r3, r3, #1
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68b8      	ldr	r0, [r7, #8]
 8002cc4:	68f9      	ldr	r1, [r7, #12]
 8002cc6:	1900      	adds	r0, r0, r4
 8002cc8:	4169      	adcs	r1, r5
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	607b      	str	r3, [r7, #4]
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f7fd fb8c 	bl	80003f4 <__aeabi_uldivmod>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	000c      	movs	r4, r1
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	4a3f      	ldr	r2, [pc, #252]	; (8002de4 <UART_SetConfig+0x3a4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d908      	bls.n	8002cfc <UART_SetConfig+0x2bc>
 8002cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cec:	4a3e      	ldr	r2, [pc, #248]	; (8002de8 <UART_SetConfig+0x3a8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d804      	bhi.n	8002cfc <UART_SetConfig+0x2bc>
        {
          huart->Instance->BRR = usartdiv;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	e161      	b.n	8002fc0 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 8002cfc:	2313      	movs	r3, #19
 8002cfe:	2218      	movs	r2, #24
 8002d00:	4694      	mov	ip, r2
 8002d02:	44bc      	add	ip, r7
 8002d04:	4463      	add	r3, ip
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]
 8002d0a:	e159      	b.n	8002fc0 <UART_SetConfig+0x580>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	69da      	ldr	r2, [r3, #28]
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d000      	beq.n	8002d1a <UART_SetConfig+0x2da>
 8002d18:	e0c4      	b.n	8002ea4 <UART_SetConfig+0x464>
  {
    switch (clocksource)
 8002d1a:	231b      	movs	r3, #27
 8002d1c:	2218      	movs	r2, #24
 8002d1e:	4694      	mov	ip, r2
 8002d20:	44bc      	add	ip, r7
 8002d22:	4463      	add	r3, ip
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d900      	bls.n	8002d2c <UART_SetConfig+0x2ec>
 8002d2a:	e087      	b.n	8002e3c <UART_SetConfig+0x3fc>
 8002d2c:	009a      	lsls	r2, r3, #2
 8002d2e:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <UART_SetConfig+0x3ac>)
 8002d30:	18d3      	adds	r3, r2, r3
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d36:	f7ff fa5b 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8002d3a:	0003      	movs	r3, r0
 8002d3c:	005a      	lsls	r2, r3, #1
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	18d2      	adds	r2, r2, r3
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	0010      	movs	r0, r2
 8002d4e:	f7fd f9db 	bl	8000108 <__udivsi3>
 8002d52:	0003      	movs	r3, r0
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d58:	e078      	b.n	8002e4c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d5a:	f7ff fa5f 	bl	800221c <HAL_RCC_GetPCLK2Freq>
 8002d5e:	0003      	movs	r3, r0
 8002d60:	005a      	lsls	r2, r3, #1
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	18d2      	adds	r2, r2, r3
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	0019      	movs	r1, r3
 8002d70:	0010      	movs	r0, r2
 8002d72:	f7fd f9c9 	bl	8000108 <__udivsi3>
 8002d76:	0003      	movs	r3, r0
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d7c:	e066      	b.n	8002e4c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d7e:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <UART_SetConfig+0x398>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2210      	movs	r2, #16
 8002d84:	4013      	ands	r3, r2
 8002d86:	d00e      	beq.n	8002da6 <UART_SetConfig+0x366>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	4a18      	ldr	r2, [pc, #96]	; (8002df0 <UART_SetConfig+0x3b0>)
 8002d90:	189a      	adds	r2, r3, r2
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	0019      	movs	r1, r3
 8002d98:	0010      	movs	r0, r2
 8002d9a:	f7fd f9b5 	bl	8000108 <__udivsi3>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002da4:	e052      	b.n	8002e4c <UART_SetConfig+0x40c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	085b      	lsrs	r3, r3, #1
 8002dac:	4a11      	ldr	r2, [pc, #68]	; (8002df4 <UART_SetConfig+0x3b4>)
 8002dae:	189a      	adds	r2, r3, r2
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	0019      	movs	r1, r3
 8002db6:	0010      	movs	r0, r2
 8002db8:	f7fd f9a6 	bl	8000108 <__udivsi3>
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dc2:	e043      	b.n	8002e4c <UART_SetConfig+0x40c>
 8002dc4:	efff69f3 	.word	0xefff69f3
 8002dc8:	ffffcfff 	.word	0xffffcfff
 8002dcc:	40004800 	.word	0x40004800
 8002dd0:	fffff4ff 	.word	0xfffff4ff
 8002dd4:	40004400 	.word	0x40004400
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	003d0900 	.word	0x003d0900
 8002de0:	00f42400 	.word	0x00f42400
 8002de4:	000002ff 	.word	0x000002ff
 8002de8:	000fffff 	.word	0x000fffff
 8002dec:	08004178 	.word	0x08004178
 8002df0:	007a1200 	.word	0x007a1200
 8002df4:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002df8:	f7ff f96c 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	005a      	lsls	r2, r3, #1
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	085b      	lsrs	r3, r3, #1
 8002e06:	18d2      	adds	r2, r2, r3
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	0010      	movs	r0, r2
 8002e10:	f7fd f97a 	bl	8000108 <__udivsi3>
 8002e14:	0003      	movs	r3, r0
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e1a:	e017      	b.n	8002e4c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	085b      	lsrs	r3, r3, #1
 8002e22:	2280      	movs	r2, #128	; 0x80
 8002e24:	0252      	lsls	r2, r2, #9
 8002e26:	189a      	adds	r2, r3, r2
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	0010      	movs	r0, r2
 8002e30:	f7fd f96a 	bl	8000108 <__udivsi3>
 8002e34:	0003      	movs	r3, r0
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e3a:	e007      	b.n	8002e4c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002e3c:	2313      	movs	r3, #19
 8002e3e:	2218      	movs	r2, #24
 8002e40:	4694      	mov	ip, r2
 8002e42:	44bc      	add	ip, r7
 8002e44:	4463      	add	r3, ip
 8002e46:	2201      	movs	r2, #1
 8002e48:	701a      	strb	r2, [r3, #0]
        break;
 8002e4a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4e:	2b0f      	cmp	r3, #15
 8002e50:	d920      	bls.n	8002e94 <UART_SetConfig+0x454>
 8002e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e54:	4a62      	ldr	r2, [pc, #392]	; (8002fe0 <UART_SetConfig+0x5a0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d81c      	bhi.n	8002e94 <UART_SetConfig+0x454>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	200a      	movs	r0, #10
 8002e60:	2418      	movs	r4, #24
 8002e62:	193b      	adds	r3, r7, r4
 8002e64:	181b      	adds	r3, r3, r0
 8002e66:	210f      	movs	r1, #15
 8002e68:	438a      	bics	r2, r1
 8002e6a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6e:	085b      	lsrs	r3, r3, #1
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2207      	movs	r2, #7
 8002e74:	4013      	ands	r3, r2
 8002e76:	b299      	uxth	r1, r3
 8002e78:	193b      	adds	r3, r7, r4
 8002e7a:	181b      	adds	r3, r3, r0
 8002e7c:	193a      	adds	r2, r7, r4
 8002e7e:	1812      	adds	r2, r2, r0
 8002e80:	8812      	ldrh	r2, [r2, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	193a      	adds	r2, r7, r4
 8002e8c:	1812      	adds	r2, r2, r0
 8002e8e:	8812      	ldrh	r2, [r2, #0]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	e095      	b.n	8002fc0 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 8002e94:	2313      	movs	r3, #19
 8002e96:	2218      	movs	r2, #24
 8002e98:	4694      	mov	ip, r2
 8002e9a:	44bc      	add	ip, r7
 8002e9c:	4463      	add	r3, ip
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	e08d      	b.n	8002fc0 <UART_SetConfig+0x580>
    }
  }
  else
  {
    switch (clocksource)
 8002ea4:	231b      	movs	r3, #27
 8002ea6:	2218      	movs	r2, #24
 8002ea8:	4694      	mov	ip, r2
 8002eaa:	44bc      	add	ip, r7
 8002eac:	4463      	add	r3, ip
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d86a      	bhi.n	8002f8a <UART_SetConfig+0x54a>
 8002eb4:	009a      	lsls	r2, r3, #2
 8002eb6:	4b4b      	ldr	r3, [pc, #300]	; (8002fe4 <UART_SetConfig+0x5a4>)
 8002eb8:	18d3      	adds	r3, r2, r3
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ebe:	f7ff f997 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8002ec2:	0002      	movs	r2, r0
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	085b      	lsrs	r3, r3, #1
 8002eca:	18d2      	adds	r2, r2, r3
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	0010      	movs	r0, r2
 8002ed4:	f7fd f918 	bl	8000108 <__udivsi3>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ede:	e05c      	b.n	8002f9a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002ee0:	f7ff f99c 	bl	800221c <HAL_RCC_GetPCLK2Freq>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	18d2      	adds	r2, r2, r3
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	0010      	movs	r0, r2
 8002ef6:	f7fd f907 	bl	8000108 <__udivsi3>
 8002efa:	0003      	movs	r3, r0
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f00:	e04b      	b.n	8002f9a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f02:	4b39      	ldr	r3, [pc, #228]	; (8002fe8 <UART_SetConfig+0x5a8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2210      	movs	r2, #16
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d00e      	beq.n	8002f2a <UART_SetConfig+0x4ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	085b      	lsrs	r3, r3, #1
 8002f12:	4a36      	ldr	r2, [pc, #216]	; (8002fec <UART_SetConfig+0x5ac>)
 8002f14:	189a      	adds	r2, r3, r2
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	0010      	movs	r0, r2
 8002f1e:	f7fd f8f3 	bl	8000108 <__udivsi3>
 8002f22:	0003      	movs	r3, r0
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002f28:	e037      	b.n	8002f9a <UART_SetConfig+0x55a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	4a2f      	ldr	r2, [pc, #188]	; (8002ff0 <UART_SetConfig+0x5b0>)
 8002f32:	189a      	adds	r2, r3, r2
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	0019      	movs	r1, r3
 8002f3a:	0010      	movs	r0, r2
 8002f3c:	f7fd f8e4 	bl	8000108 <__udivsi3>
 8002f40:	0003      	movs	r3, r0
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f46:	e028      	b.n	8002f9a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f48:	f7ff f8c4 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8002f4c:	0002      	movs	r2, r0
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	085b      	lsrs	r3, r3, #1
 8002f54:	18d2      	adds	r2, r2, r3
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	0010      	movs	r0, r2
 8002f5e:	f7fd f8d3 	bl	8000108 <__udivsi3>
 8002f62:	0003      	movs	r3, r0
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f68:	e017      	b.n	8002f9a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	2280      	movs	r2, #128	; 0x80
 8002f72:	0212      	lsls	r2, r2, #8
 8002f74:	189a      	adds	r2, r3, r2
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	0010      	movs	r0, r2
 8002f7e:	f7fd f8c3 	bl	8000108 <__udivsi3>
 8002f82:	0003      	movs	r3, r0
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f88:	e007      	b.n	8002f9a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002f8a:	2313      	movs	r3, #19
 8002f8c:	2218      	movs	r2, #24
 8002f8e:	4694      	mov	ip, r2
 8002f90:	44bc      	add	ip, r7
 8002f92:	4463      	add	r3, ip
 8002f94:	2201      	movs	r2, #1
 8002f96:	701a      	strb	r2, [r3, #0]
        break;
 8002f98:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	2b0f      	cmp	r3, #15
 8002f9e:	d908      	bls.n	8002fb2 <UART_SetConfig+0x572>
 8002fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa2:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <UART_SetConfig+0x5a0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d804      	bhi.n	8002fb2 <UART_SetConfig+0x572>
    {
      huart->Instance->BRR = usartdiv;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fae:	60da      	str	r2, [r3, #12]
 8002fb0:	e006      	b.n	8002fc0 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 8002fb2:	2313      	movs	r3, #19
 8002fb4:	2218      	movs	r2, #24
 8002fb6:	4694      	mov	ip, r2
 8002fb8:	44bc      	add	ip, r7
 8002fba:	4463      	add	r3, ip
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002fcc:	2313      	movs	r3, #19
 8002fce:	2218      	movs	r2, #24
 8002fd0:	4694      	mov	ip, r2
 8002fd2:	44bc      	add	ip, r7
 8002fd4:	4463      	add	r3, ip
 8002fd6:	781b      	ldrb	r3, [r3, #0]
}
 8002fd8:	0018      	movs	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b00e      	add	sp, #56	; 0x38
 8002fde:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe0:	0000ffff 	.word	0x0000ffff
 8002fe4:	0800419c 	.word	0x0800419c
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	003d0900 	.word	0x003d0900
 8002ff0:	00f42400 	.word	0x00f42400

08002ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	2201      	movs	r2, #1
 8003002:	4013      	ands	r3, r2
 8003004:	d00b      	beq.n	800301e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4a4a      	ldr	r2, [pc, #296]	; (8003138 <UART_AdvFeatureConfig+0x144>)
 800300e:	4013      	ands	r3, r2
 8003010:	0019      	movs	r1, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	2202      	movs	r2, #2
 8003024:	4013      	ands	r3, r2
 8003026:	d00b      	beq.n	8003040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	4a43      	ldr	r2, [pc, #268]	; (800313c <UART_AdvFeatureConfig+0x148>)
 8003030:	4013      	ands	r3, r2
 8003032:	0019      	movs	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	2204      	movs	r2, #4
 8003046:	4013      	ands	r3, r2
 8003048:	d00b      	beq.n	8003062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4a3b      	ldr	r2, [pc, #236]	; (8003140 <UART_AdvFeatureConfig+0x14c>)
 8003052:	4013      	ands	r3, r2
 8003054:	0019      	movs	r1, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	2208      	movs	r2, #8
 8003068:	4013      	ands	r3, r2
 800306a:	d00b      	beq.n	8003084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4a34      	ldr	r2, [pc, #208]	; (8003144 <UART_AdvFeatureConfig+0x150>)
 8003074:	4013      	ands	r3, r2
 8003076:	0019      	movs	r1, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	2210      	movs	r2, #16
 800308a:	4013      	ands	r3, r2
 800308c:	d00b      	beq.n	80030a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4a2c      	ldr	r2, [pc, #176]	; (8003148 <UART_AdvFeatureConfig+0x154>)
 8003096:	4013      	ands	r3, r2
 8003098:	0019      	movs	r1, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	2220      	movs	r2, #32
 80030ac:	4013      	ands	r3, r2
 80030ae:	d00b      	beq.n	80030c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	4a25      	ldr	r2, [pc, #148]	; (800314c <UART_AdvFeatureConfig+0x158>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	0019      	movs	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2240      	movs	r2, #64	; 0x40
 80030ce:	4013      	ands	r3, r2
 80030d0:	d01d      	beq.n	800310e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <UART_AdvFeatureConfig+0x15c>)
 80030da:	4013      	ands	r3, r2
 80030dc:	0019      	movs	r1, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	035b      	lsls	r3, r3, #13
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d10b      	bne.n	800310e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a15      	ldr	r2, [pc, #84]	; (8003154 <UART_AdvFeatureConfig+0x160>)
 80030fe:	4013      	ands	r3, r2
 8003100:	0019      	movs	r1, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	4013      	ands	r3, r2
 8003116:	d00b      	beq.n	8003130 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <UART_AdvFeatureConfig+0x164>)
 8003120:	4013      	ands	r3, r2
 8003122:	0019      	movs	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	605a      	str	r2, [r3, #4]
  }
}
 8003130:	46c0      	nop			; (mov r8, r8)
 8003132:	46bd      	mov	sp, r7
 8003134:	b002      	add	sp, #8
 8003136:	bd80      	pop	{r7, pc}
 8003138:	fffdffff 	.word	0xfffdffff
 800313c:	fffeffff 	.word	0xfffeffff
 8003140:	fffbffff 	.word	0xfffbffff
 8003144:	ffff7fff 	.word	0xffff7fff
 8003148:	ffffefff 	.word	0xffffefff
 800314c:	ffffdfff 	.word	0xffffdfff
 8003150:	ffefffff 	.word	0xffefffff
 8003154:	ff9fffff 	.word	0xff9fffff
 8003158:	fff7ffff 	.word	0xfff7ffff

0800315c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af02      	add	r7, sp, #8
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800316a:	f7fd faa5 	bl	80006b8 <HAL_GetTick>
 800316e:	0003      	movs	r3, r0
 8003170:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2208      	movs	r2, #8
 800317a:	4013      	ands	r3, r2
 800317c:	2b08      	cmp	r3, #8
 800317e:	d10d      	bne.n	800319c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	0399      	lsls	r1, r3, #14
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <UART_CheckIdleState+0x88>)
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	0013      	movs	r3, r2
 800318e:	2200      	movs	r2, #0
 8003190:	f000 f82a 	bl	80031e8 <UART_WaitOnFlagUntilTimeout>
 8003194:	1e03      	subs	r3, r0, #0
 8003196:	d001      	beq.n	800319c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e01f      	b.n	80031dc <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2204      	movs	r2, #4
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d10d      	bne.n	80031c6 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	03d9      	lsls	r1, r3, #15
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <UART_CheckIdleState+0x88>)
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	0013      	movs	r3, r2
 80031b8:	2200      	movs	r2, #0
 80031ba:	f000 f815 	bl	80031e8 <UART_WaitOnFlagUntilTimeout>
 80031be:	1e03      	subs	r3, r0, #0
 80031c0:	d001      	beq.n	80031c6 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e00a      	b.n	80031dc <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2220      	movs	r2, #32
 80031ca:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2220      	movs	r2, #32
 80031d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2270      	movs	r2, #112	; 0x70
 80031d6:	2100      	movs	r1, #0
 80031d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	0018      	movs	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	b004      	add	sp, #16
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	01ffffff 	.word	0x01ffffff

080031e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	1dfb      	adds	r3, r7, #7
 80031f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f8:	e029      	b.n	800324e <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	3301      	adds	r3, #1
 80031fe:	d026      	beq.n	800324e <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003200:	f7fd fa5a 	bl	80006b8 <HAL_GetTick>
 8003204:	0002      	movs	r2, r0
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	429a      	cmp	r2, r3
 800320e:	d302      	bcc.n	8003216 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d11b      	bne.n	800324e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4915      	ldr	r1, [pc, #84]	; (8003278 <UART_WaitOnFlagUntilTimeout+0x90>)
 8003222:	400a      	ands	r2, r1
 8003224:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2101      	movs	r1, #1
 8003232:	438a      	bics	r2, r1
 8003234:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2270      	movs	r2, #112	; 0x70
 8003246:	2100      	movs	r1, #0
 8003248:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e00f      	b.n	800326e <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	4013      	ands	r3, r2
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	425a      	negs	r2, r3
 800325e:	4153      	adcs	r3, r2
 8003260:	b2db      	uxtb	r3, r3
 8003262:	001a      	movs	r2, r3
 8003264:	1dfb      	adds	r3, r7, #7
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d0c6      	beq.n	80031fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	0018      	movs	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	b004      	add	sp, #16
 8003274:	bd80      	pop	{r7, pc}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	fffffe5f 	.word	0xfffffe5f

0800327c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800327c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327e:	b089      	sub	sp, #36	; 0x24
 8003280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t vrefint_cal= *((uint16_t*)VREFINT_ADDR);
 8003282:	4a85      	ldr	r2, [pc, #532]	; (8003498 <main+0x21c>)
 8003284:	231e      	movs	r3, #30
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	8812      	ldrh	r2, [r2, #0]
 800328a:	801a      	strh	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800328c:	f7fd f9be 	bl	800060c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003290:	f000 f91a 	bl	80034c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003294:	f000 fba4 	bl	80039e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8003298:	f000 faa0 	bl	80037dc <MX_TIM2_Init>
  MX_TIM22_Init();
 800329c:	f000 fb06 	bl	80038ac <MX_TIM22_Init>
  MX_ADC_Init();
 80032a0:	f000 f984 	bl	80035ac <MX_ADC_Init>
  MX_USART2_UART_Init();
 80032a4:	f000 fb6c 	bl	8003980 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80032a8:	f000 fa2e 	bl	8003708 <MX_I2C1_Init>
  MX_LPTIM1_Init();
 80032ac:	f000 fa6c 	bl	8003788 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(BAT_LO_GPIO_Port, BAT_LO_Pin, 1);
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	0059      	lsls	r1, r3, #1
 80032b4:	23a0      	movs	r3, #160	; 0xa0
 80032b6:	05db      	lsls	r3, r3, #23
 80032b8:	2201      	movs	r2, #1
 80032ba:	0018      	movs	r0, r3
 80032bc:	f7fe f89a 	bl	80013f4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SENS_ENA_GPIO_Port, SENS_ENA_Pin, 0);
 80032c0:	4b76      	ldr	r3, [pc, #472]	; (800349c <main+0x220>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	2102      	movs	r1, #2
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7fe f894 	bl	80013f4 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  uint16_t vbat_adc = r_single_ext_channel_ADC(ADC_CHANNEL_0);
 80032cc:	2001      	movs	r0, #1
 80032ce:	f000 fcc9 	bl	8003c64 <r_single_ext_channel_ADC>
 80032d2:	0002      	movs	r2, r0
 80032d4:	251c      	movs	r5, #28
 80032d6:	197b      	adds	r3, r7, r5
 80032d8:	801a      	strh	r2, [r3, #0]
	  uint16_t soil1_adc = r_single_ext_channel_ADC(ADC_CHANNEL_1);
 80032da:	4b71      	ldr	r3, [pc, #452]	; (80034a0 <main+0x224>)
 80032dc:	0018      	movs	r0, r3
 80032de:	f000 fcc1 	bl	8003c64 <r_single_ext_channel_ADC>
 80032e2:	0002      	movs	r2, r0
 80032e4:	261a      	movs	r6, #26
 80032e6:	19bb      	adds	r3, r7, r6
 80032e8:	801a      	strh	r2, [r3, #0]
	  uint16_t soil2_adc = r_single_ext_channel_ADC(ADC_CHANNEL_2);
 80032ea:	4b6e      	ldr	r3, [pc, #440]	; (80034a4 <main+0x228>)
 80032ec:	0018      	movs	r0, r3
 80032ee:	f000 fcb9 	bl	8003c64 <r_single_ext_channel_ADC>
 80032f2:	0002      	movs	r2, r0
 80032f4:	2318      	movs	r3, #24
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	801a      	strh	r2, [r3, #0]
	  uint16_t soil3_adc = r_single_ext_channel_ADC(ADC_CHANNEL_3);
 80032fa:	4b6b      	ldr	r3, [pc, #428]	; (80034a8 <main+0x22c>)
 80032fc:	0018      	movs	r0, r3
 80032fe:	f000 fcb1 	bl	8003c64 <r_single_ext_channel_ADC>
 8003302:	0002      	movs	r2, r0
 8003304:	2116      	movs	r1, #22
 8003306:	187b      	adds	r3, r7, r1
 8003308:	801a      	strh	r2, [r3, #0]
	  uint16_t soil4_adc = r_single_ext_channel_ADC(ADC_CHANNEL_4);
 800330a:	4b68      	ldr	r3, [pc, #416]	; (80034ac <main+0x230>)
 800330c:	0018      	movs	r0, r3
 800330e:	f000 fca9 	bl	8003c64 <r_single_ext_channel_ADC>
 8003312:	0002      	movs	r2, r0
 8003314:	2014      	movs	r0, #20
 8003316:	183b      	adds	r3, r7, r0
 8003318:	801a      	strh	r2, [r3, #0]
	  uint16_t vrefint_adc = r_single_int_channel_ADC(ADC_CHANNEL_VREFINT);
 800331a:	4b65      	ldr	r3, [pc, #404]	; (80034b0 <main+0x234>)
 800331c:	0018      	movs	r0, r3
 800331e:	f000 fc4f 	bl	8003bc0 <r_single_int_channel_ADC>
 8003322:	0002      	movs	r2, r0
 8003324:	2412      	movs	r4, #18
 8003326:	193b      	adds	r3, r7, r4
 8003328:	801a      	strh	r2, [r3, #0]

	  uint16_t vdd_real = VDD*vrefint_cal/vrefint_adc;
 800332a:	231e      	movs	r3, #30
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	4a60      	ldr	r2, [pc, #384]	; (80034b4 <main+0x238>)
 8003332:	435a      	muls	r2, r3
 8003334:	193b      	adds	r3, r7, r4
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	0019      	movs	r1, r3
 800333a:	0010      	movs	r0, r2
 800333c:	f7fc ff6e 	bl	800021c <__divsi3>
 8003340:	0003      	movs	r3, r0
 8003342:	001a      	movs	r2, r3
 8003344:	2410      	movs	r4, #16
 8003346:	193b      	adds	r3, r7, r4
 8003348:	801a      	strh	r2, [r3, #0]

	  uint16_t vbat = vdd_real*vbat_adc/4095;
 800334a:	193b      	adds	r3, r7, r4
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	197a      	adds	r2, r7, r5
 8003350:	8812      	ldrh	r2, [r2, #0]
 8003352:	4353      	muls	r3, r2
 8003354:	4958      	ldr	r1, [pc, #352]	; (80034b8 <main+0x23c>)
 8003356:	0018      	movs	r0, r3
 8003358:	f7fc ff60 	bl	800021c <__divsi3>
 800335c:	0003      	movs	r3, r0
 800335e:	001a      	movs	r2, r3
 8003360:	250e      	movs	r5, #14
 8003362:	197b      	adds	r3, r7, r5
 8003364:	801a      	strh	r2, [r3, #0]
	  uint16_t soil1 = vdd_real*soil1_adc/4095;
 8003366:	193b      	adds	r3, r7, r4
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	19ba      	adds	r2, r7, r6
 800336c:	8812      	ldrh	r2, [r2, #0]
 800336e:	4353      	muls	r3, r2
 8003370:	4951      	ldr	r1, [pc, #324]	; (80034b8 <main+0x23c>)
 8003372:	0018      	movs	r0, r3
 8003374:	f7fc ff52 	bl	800021c <__divsi3>
 8003378:	0003      	movs	r3, r0
 800337a:	001a      	movs	r2, r3
 800337c:	250c      	movs	r5, #12
 800337e:	197b      	adds	r3, r7, r5
 8003380:	801a      	strh	r2, [r3, #0]
	  uint16_t soil2 = vdd_real*soil2_adc/4095;
 8003382:	193b      	adds	r3, r7, r4
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	2218      	movs	r2, #24
 8003388:	18ba      	adds	r2, r7, r2
 800338a:	8812      	ldrh	r2, [r2, #0]
 800338c:	4353      	muls	r3, r2
 800338e:	494a      	ldr	r1, [pc, #296]	; (80034b8 <main+0x23c>)
 8003390:	0018      	movs	r0, r3
 8003392:	f7fc ff43 	bl	800021c <__divsi3>
 8003396:	0003      	movs	r3, r0
 8003398:	001a      	movs	r2, r3
 800339a:	260a      	movs	r6, #10
 800339c:	19bb      	adds	r3, r7, r6
 800339e:	801a      	strh	r2, [r3, #0]
	  uint16_t soil3 = vdd_real*soil3_adc/4095;
 80033a0:	193b      	adds	r3, r7, r4
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	2116      	movs	r1, #22
 80033a6:	187a      	adds	r2, r7, r1
 80033a8:	8812      	ldrh	r2, [r2, #0]
 80033aa:	4353      	muls	r3, r2
 80033ac:	4942      	ldr	r1, [pc, #264]	; (80034b8 <main+0x23c>)
 80033ae:	0018      	movs	r0, r3
 80033b0:	f7fc ff34 	bl	800021c <__divsi3>
 80033b4:	0003      	movs	r3, r0
 80033b6:	001a      	movs	r2, r3
 80033b8:	2308      	movs	r3, #8
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	801a      	strh	r2, [r3, #0]
	  uint16_t soil4 = vdd_real*soil4_adc/4095;
 80033be:	193b      	adds	r3, r7, r4
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	2014      	movs	r0, #20
 80033c4:	183a      	adds	r2, r7, r0
 80033c6:	8812      	ldrh	r2, [r2, #0]
 80033c8:	4353      	muls	r3, r2
 80033ca:	493b      	ldr	r1, [pc, #236]	; (80034b8 <main+0x23c>)
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7fc ff25 	bl	800021c <__divsi3>
 80033d2:	0003      	movs	r3, r0
 80033d4:	001a      	movs	r2, r3
 80033d6:	1dbb      	adds	r3, r7, #6
 80033d8:	801a      	strh	r2, [r3, #0]
	  {

			HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_RESET);
	  }*/

	  HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, soil1 >= SOIL_THRESHOLD_MV);
 80033da:	197b      	adds	r3, r7, r5
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	4a37      	ldr	r2, [pc, #220]	; (80034bc <main+0x240>)
 80033e0:	429a      	cmp	r2, r3
 80033e2:	419b      	sbcs	r3, r3
 80033e4:	425b      	negs	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	001a      	movs	r2, r3
 80033ea:	4b2c      	ldr	r3, [pc, #176]	; (800349c <main+0x220>)
 80033ec:	2110      	movs	r1, #16
 80033ee:	0018      	movs	r0, r3
 80033f0:	f7fe f800 	bl	80013f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, soil2 >= SOIL_THRESHOLD_MV);
 80033f4:	19bb      	adds	r3, r7, r6
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	4a30      	ldr	r2, [pc, #192]	; (80034bc <main+0x240>)
 80033fa:	429a      	cmp	r2, r3
 80033fc:	419b      	sbcs	r3, r3
 80033fe:	425b      	negs	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	001a      	movs	r2, r3
 8003404:	4b25      	ldr	r3, [pc, #148]	; (800349c <main+0x220>)
 8003406:	2108      	movs	r1, #8
 8003408:	0018      	movs	r0, r3
 800340a:	f7fd fff3 	bl	80013f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, soil3 >= SOIL_THRESHOLD_MV);
 800340e:	2308      	movs	r3, #8
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	4a29      	ldr	r2, [pc, #164]	; (80034bc <main+0x240>)
 8003416:	429a      	cmp	r2, r3
 8003418:	419b      	sbcs	r3, r3
 800341a:	425b      	negs	r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	001a      	movs	r2, r3
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	0219      	lsls	r1, r3, #8
 8003424:	23a0      	movs	r3, #160	; 0xa0
 8003426:	05db      	lsls	r3, r3, #23
 8003428:	0018      	movs	r0, r3
 800342a:	f7fd ffe3 	bl	80013f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT4_GPIO_Port, OUT4_Pin, soil4 >= SOIL_THRESHOLD_MV);
 800342e:	1dbb      	adds	r3, r7, #6
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	4a22      	ldr	r2, [pc, #136]	; (80034bc <main+0x240>)
 8003434:	429a      	cmp	r2, r3
 8003436:	419b      	sbcs	r3, r3
 8003438:	425b      	negs	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	001a      	movs	r2, r3
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	0159      	lsls	r1, r3, #5
 8003442:	23a0      	movs	r3, #160	; 0xa0
 8003444:	05db      	lsls	r3, r3, #23
 8003446:	0018      	movs	r0, r3
 8003448:	f7fd ffd4 	bl	80013f4 <HAL_GPIO_WritePin>

	  HAL_Delay(WATERING_TIME_MS);
 800344c:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <main+0x244>)
 800344e:	0018      	movs	r0, r3
 8003450:	f7fd f93c 	bl	80006cc <HAL_Delay>

	  HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, 0);
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <main+0x220>)
 8003456:	2200      	movs	r2, #0
 8003458:	2110      	movs	r1, #16
 800345a:	0018      	movs	r0, r3
 800345c:	f7fd ffca 	bl	80013f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, 0);
 8003460:	4b0e      	ldr	r3, [pc, #56]	; (800349c <main+0x220>)
 8003462:	2200      	movs	r2, #0
 8003464:	2108      	movs	r1, #8
 8003466:	0018      	movs	r0, r3
 8003468:	f7fd ffc4 	bl	80013f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, 0);
 800346c:	2380      	movs	r3, #128	; 0x80
 800346e:	0219      	lsls	r1, r3, #8
 8003470:	23a0      	movs	r3, #160	; 0xa0
 8003472:	05db      	lsls	r3, r3, #23
 8003474:	2200      	movs	r2, #0
 8003476:	0018      	movs	r0, r3
 8003478:	f7fd ffbc 	bl	80013f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT4_GPIO_Port, OUT4_Pin, 0);
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	0159      	lsls	r1, r3, #5
 8003480:	23a0      	movs	r3, #160	; 0xa0
 8003482:	05db      	lsls	r3, r3, #23
 8003484:	2200      	movs	r2, #0
 8003486:	0018      	movs	r0, r3
 8003488:	f7fd ffb4 	bl	80013f4 <HAL_GPIO_WritePin>

	  HAL_Delay(SLEEP_TIME_MS);
 800348c:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <main+0x248>)
 800348e:	0018      	movs	r0, r3
 8003490:	f7fd f91c 	bl	80006cc <HAL_Delay>
  {
 8003494:	e71a      	b.n	80032cc <main+0x50>
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	1ff80078 	.word	0x1ff80078
 800349c:	50000400 	.word	0x50000400
 80034a0:	04000002 	.word	0x04000002
 80034a4:	08000004 	.word	0x08000004
 80034a8:	0c000008 	.word	0x0c000008
 80034ac:	10000010 	.word	0x10000010
 80034b0:	44020000 	.word	0x44020000
 80034b4:	00000ce4 	.word	0x00000ce4
 80034b8:	00000fff 	.word	0x00000fff
 80034bc:	000004af 	.word	0x000004af
 80034c0:	00001388 	.word	0x00001388
 80034c4:	000dbba0 	.word	0x000dbba0

080034c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034c8:	b590      	push	{r4, r7, lr}
 80034ca:	b099      	sub	sp, #100	; 0x64
 80034cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034ce:	242c      	movs	r4, #44	; 0x2c
 80034d0:	193b      	adds	r3, r7, r4
 80034d2:	0018      	movs	r0, r3
 80034d4:	2334      	movs	r3, #52	; 0x34
 80034d6:	001a      	movs	r2, r3
 80034d8:	2100      	movs	r1, #0
 80034da:	f000 fe39 	bl	8004150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034de:	2318      	movs	r3, #24
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	0018      	movs	r0, r3
 80034e4:	2314      	movs	r3, #20
 80034e6:	001a      	movs	r2, r3
 80034e8:	2100      	movs	r1, #0
 80034ea:	f000 fe31 	bl	8004150 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034ee:	003b      	movs	r3, r7
 80034f0:	0018      	movs	r0, r3
 80034f2:	2318      	movs	r3, #24
 80034f4:	001a      	movs	r2, r3
 80034f6:	2100      	movs	r1, #0
 80034f8:	f000 fe2a 	bl	8004150 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034fc:	4b29      	ldr	r3, [pc, #164]	; (80035a4 <SystemClock_Config+0xdc>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a29      	ldr	r2, [pc, #164]	; (80035a8 <SystemClock_Config+0xe0>)
 8003502:	401a      	ands	r2, r3
 8003504:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <SystemClock_Config+0xdc>)
 8003506:	2180      	movs	r1, #128	; 0x80
 8003508:	0109      	lsls	r1, r1, #4
 800350a:	430a      	orrs	r2, r1
 800350c:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800350e:	0021      	movs	r1, r4
 8003510:	187b      	adds	r3, r7, r1
 8003512:	2210      	movs	r2, #16
 8003514:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003516:	187b      	adds	r3, r7, r1
 8003518:	2201      	movs	r2, #1
 800351a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800351c:	187b      	adds	r3, r7, r1
 800351e:	2200      	movs	r2, #0
 8003520:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003522:	187b      	adds	r3, r7, r1
 8003524:	22a0      	movs	r2, #160	; 0xa0
 8003526:	0212      	lsls	r2, r2, #8
 8003528:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800352a:	187b      	adds	r3, r7, r1
 800352c:	2200      	movs	r2, #0
 800352e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003530:	187b      	adds	r3, r7, r1
 8003532:	0018      	movs	r0, r3
 8003534:	f7fe f92a 	bl	800178c <HAL_RCC_OscConfig>
 8003538:	1e03      	subs	r3, r0, #0
 800353a:	d001      	beq.n	8003540 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800353c:	f000 fbbc 	bl	8003cb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003540:	2118      	movs	r1, #24
 8003542:	187b      	adds	r3, r7, r1
 8003544:	220f      	movs	r2, #15
 8003546:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003548:	187b      	adds	r3, r7, r1
 800354a:	2200      	movs	r2, #0
 800354c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800354e:	187b      	adds	r3, r7, r1
 8003550:	2200      	movs	r2, #0
 8003552:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003554:	187b      	adds	r3, r7, r1
 8003556:	2200      	movs	r2, #0
 8003558:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800355a:	187b      	adds	r3, r7, r1
 800355c:	2200      	movs	r2, #0
 800355e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003560:	187b      	adds	r3, r7, r1
 8003562:	2100      	movs	r1, #0
 8003564:	0018      	movs	r0, r3
 8003566:	f7fe fc8b 	bl	8001e80 <HAL_RCC_ClockConfig>
 800356a:	1e03      	subs	r3, r0, #0
 800356c:	d001      	beq.n	8003572 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800356e:	f000 fba3 	bl	8003cb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8003572:	003b      	movs	r3, r7
 8003574:	228a      	movs	r2, #138	; 0x8a
 8003576:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_LPTIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003578:	003b      	movs	r3, r7
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800357e:	003b      	movs	r3, r7
 8003580:	2200      	movs	r2, #0
 8003582:	611a      	str	r2, [r3, #16]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8003584:	003b      	movs	r3, r7
 8003586:	2200      	movs	r2, #0
 8003588:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800358a:	003b      	movs	r3, r7
 800358c:	0018      	movs	r0, r3
 800358e:	f7fe fe5b 	bl	8002248 <HAL_RCCEx_PeriphCLKConfig>
 8003592:	1e03      	subs	r3, r0, #0
 8003594:	d001      	beq.n	800359a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8003596:	f000 fb8f 	bl	8003cb8 <Error_Handler>
  }
}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	46bd      	mov	sp, r7
 800359e:	b019      	add	sp, #100	; 0x64
 80035a0:	bd90      	pop	{r4, r7, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	40007000 	.word	0x40007000
 80035a8:	ffffe7ff 	.word	0xffffe7ff

080035ac <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80035b2:	003b      	movs	r3, r7
 80035b4:	0018      	movs	r0, r3
 80035b6:	2308      	movs	r3, #8
 80035b8:	001a      	movs	r2, r3
 80035ba:	2100      	movs	r1, #0
 80035bc:	f000 fdc8 	bl	8004150 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80035c0:	4b4a      	ldr	r3, [pc, #296]	; (80036ec <MX_ADC_Init+0x140>)
 80035c2:	4a4b      	ldr	r2, [pc, #300]	; (80036f0 <MX_ADC_Init+0x144>)
 80035c4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80035c6:	4b49      	ldr	r3, [pc, #292]	; (80036ec <MX_ADC_Init+0x140>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80035cc:	4b47      	ldr	r3, [pc, #284]	; (80036ec <MX_ADC_Init+0x140>)
 80035ce:	22c0      	movs	r2, #192	; 0xc0
 80035d0:	0612      	lsls	r2, r2, #24
 80035d2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80035d4:	4b45      	ldr	r3, [pc, #276]	; (80036ec <MX_ADC_Init+0x140>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 80035da:	4b44      	ldr	r3, [pc, #272]	; (80036ec <MX_ADC_Init+0x140>)
 80035dc:	2204      	movs	r2, #4
 80035de:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80035e0:	4b42      	ldr	r3, [pc, #264]	; (80036ec <MX_ADC_Init+0x140>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80035e6:	4b41      	ldr	r3, [pc, #260]	; (80036ec <MX_ADC_Init+0x140>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80035ec:	4b3f      	ldr	r3, [pc, #252]	; (80036ec <MX_ADC_Init+0x140>)
 80035ee:	2220      	movs	r2, #32
 80035f0:	2101      	movs	r1, #1
 80035f2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80035f4:	4b3d      	ldr	r3, [pc, #244]	; (80036ec <MX_ADC_Init+0x140>)
 80035f6:	2221      	movs	r2, #33	; 0x21
 80035f8:	2100      	movs	r1, #0
 80035fa:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80035fc:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <MX_ADC_Init+0x140>)
 80035fe:	2200      	movs	r2, #0
 8003600:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003602:	4b3a      	ldr	r3, [pc, #232]	; (80036ec <MX_ADC_Init+0x140>)
 8003604:	22c2      	movs	r2, #194	; 0xc2
 8003606:	32ff      	adds	r2, #255	; 0xff
 8003608:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800360a:	4b38      	ldr	r3, [pc, #224]	; (80036ec <MX_ADC_Init+0x140>)
 800360c:	222c      	movs	r2, #44	; 0x2c
 800360e:	2100      	movs	r1, #0
 8003610:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003612:	4b36      	ldr	r3, [pc, #216]	; (80036ec <MX_ADC_Init+0x140>)
 8003614:	2204      	movs	r2, #4
 8003616:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003618:	4b34      	ldr	r3, [pc, #208]	; (80036ec <MX_ADC_Init+0x140>)
 800361a:	2200      	movs	r2, #0
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800361e:	4b33      	ldr	r3, [pc, #204]	; (80036ec <MX_ADC_Init+0x140>)
 8003620:	2200      	movs	r2, #0
 8003622:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003624:	4b31      	ldr	r3, [pc, #196]	; (80036ec <MX_ADC_Init+0x140>)
 8003626:	2200      	movs	r2, #0
 8003628:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800362a:	4b30      	ldr	r3, [pc, #192]	; (80036ec <MX_ADC_Init+0x140>)
 800362c:	2200      	movs	r2, #0
 800362e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003630:	4b2e      	ldr	r3, [pc, #184]	; (80036ec <MX_ADC_Init+0x140>)
 8003632:	0018      	movs	r0, r3
 8003634:	f7fd f868 	bl	8000708 <HAL_ADC_Init>
 8003638:	1e03      	subs	r3, r0, #0
 800363a:	d001      	beq.n	8003640 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800363c:	f000 fb3c 	bl	8003cb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003640:	003b      	movs	r3, r7
 8003642:	2201      	movs	r2, #1
 8003644:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003646:	003b      	movs	r3, r7
 8003648:	2280      	movs	r2, #128	; 0x80
 800364a:	0152      	lsls	r2, r2, #5
 800364c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800364e:	003a      	movs	r2, r7
 8003650:	4b26      	ldr	r3, [pc, #152]	; (80036ec <MX_ADC_Init+0x140>)
 8003652:	0011      	movs	r1, r2
 8003654:	0018      	movs	r0, r3
 8003656:	f7fd fb01 	bl	8000c5c <HAL_ADC_ConfigChannel>
 800365a:	1e03      	subs	r3, r0, #0
 800365c:	d001      	beq.n	8003662 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800365e:	f000 fb2b 	bl	8003cb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003662:	003b      	movs	r3, r7
 8003664:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <MX_ADC_Init+0x148>)
 8003666:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003668:	003a      	movs	r2, r7
 800366a:	4b20      	ldr	r3, [pc, #128]	; (80036ec <MX_ADC_Init+0x140>)
 800366c:	0011      	movs	r1, r2
 800366e:	0018      	movs	r0, r3
 8003670:	f7fd faf4 	bl	8000c5c <HAL_ADC_ConfigChannel>
 8003674:	1e03      	subs	r3, r0, #0
 8003676:	d001      	beq.n	800367c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8003678:	f000 fb1e 	bl	8003cb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800367c:	003b      	movs	r3, r7
 800367e:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <MX_ADC_Init+0x14c>)
 8003680:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003682:	003a      	movs	r2, r7
 8003684:	4b19      	ldr	r3, [pc, #100]	; (80036ec <MX_ADC_Init+0x140>)
 8003686:	0011      	movs	r1, r2
 8003688:	0018      	movs	r0, r3
 800368a:	f7fd fae7 	bl	8000c5c <HAL_ADC_ConfigChannel>
 800368e:	1e03      	subs	r3, r0, #0
 8003690:	d001      	beq.n	8003696 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8003692:	f000 fb11 	bl	8003cb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003696:	003b      	movs	r3, r7
 8003698:	4a18      	ldr	r2, [pc, #96]	; (80036fc <MX_ADC_Init+0x150>)
 800369a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800369c:	003a      	movs	r2, r7
 800369e:	4b13      	ldr	r3, [pc, #76]	; (80036ec <MX_ADC_Init+0x140>)
 80036a0:	0011      	movs	r1, r2
 80036a2:	0018      	movs	r0, r3
 80036a4:	f7fd fada 	bl	8000c5c <HAL_ADC_ConfigChannel>
 80036a8:	1e03      	subs	r3, r0, #0
 80036aa:	d001      	beq.n	80036b0 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 80036ac:	f000 fb04 	bl	8003cb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80036b0:	003b      	movs	r3, r7
 80036b2:	4a13      	ldr	r2, [pc, #76]	; (8003700 <MX_ADC_Init+0x154>)
 80036b4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80036b6:	003a      	movs	r2, r7
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <MX_ADC_Init+0x140>)
 80036ba:	0011      	movs	r1, r2
 80036bc:	0018      	movs	r0, r3
 80036be:	f7fd facd 	bl	8000c5c <HAL_ADC_ConfigChannel>
 80036c2:	1e03      	subs	r3, r0, #0
 80036c4:	d001      	beq.n	80036ca <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 80036c6:	f000 faf7 	bl	8003cb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80036ca:	003b      	movs	r3, r7
 80036cc:	4a0d      	ldr	r2, [pc, #52]	; (8003704 <MX_ADC_Init+0x158>)
 80036ce:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80036d0:	003a      	movs	r2, r7
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <MX_ADC_Init+0x140>)
 80036d4:	0011      	movs	r1, r2
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7fd fac0 	bl	8000c5c <HAL_ADC_ConfigChannel>
 80036dc:	1e03      	subs	r3, r0, #0
 80036de:	d001      	beq.n	80036e4 <MX_ADC_Init+0x138>
  {
    Error_Handler();
 80036e0:	f000 faea 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b002      	add	sp, #8
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000198 	.word	0x20000198
 80036f0:	40012400 	.word	0x40012400
 80036f4:	04000002 	.word	0x04000002
 80036f8:	08000004 	.word	0x08000004
 80036fc:	0c000008 	.word	0x0c000008
 8003700:	10000010 	.word	0x10000010
 8003704:	44020000 	.word	0x44020000

08003708 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800370c:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <MX_I2C1_Init+0x78>)
 800370e:	4a1d      	ldr	r2, [pc, #116]	; (8003784 <MX_I2C1_Init+0x7c>)
 8003710:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8003712:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <MX_I2C1_Init+0x78>)
 8003714:	22e1      	movs	r2, #225	; 0xe1
 8003716:	00d2      	lsls	r2, r2, #3
 8003718:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800371a:	4b19      	ldr	r3, [pc, #100]	; (8003780 <MX_I2C1_Init+0x78>)
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003720:	4b17      	ldr	r3, [pc, #92]	; (8003780 <MX_I2C1_Init+0x78>)
 8003722:	2201      	movs	r2, #1
 8003724:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003726:	4b16      	ldr	r3, [pc, #88]	; (8003780 <MX_I2C1_Init+0x78>)
 8003728:	2200      	movs	r2, #0
 800372a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800372c:	4b14      	ldr	r3, [pc, #80]	; (8003780 <MX_I2C1_Init+0x78>)
 800372e:	2200      	movs	r2, #0
 8003730:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003732:	4b13      	ldr	r3, [pc, #76]	; (8003780 <MX_I2C1_Init+0x78>)
 8003734:	2200      	movs	r2, #0
 8003736:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <MX_I2C1_Init+0x78>)
 800373a:	2200      	movs	r2, #0
 800373c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <MX_I2C1_Init+0x78>)
 8003740:	2200      	movs	r2, #0
 8003742:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003744:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <MX_I2C1_Init+0x78>)
 8003746:	0018      	movs	r0, r3
 8003748:	f7fd fe72 	bl	8001430 <HAL_I2C_Init>
 800374c:	1e03      	subs	r3, r0, #0
 800374e:	d001      	beq.n	8003754 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003750:	f000 fab2 	bl	8003cb8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003754:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <MX_I2C1_Init+0x78>)
 8003756:	2100      	movs	r1, #0
 8003758:	0018      	movs	r0, r3
 800375a:	f7fd feff 	bl	800155c <HAL_I2CEx_ConfigAnalogFilter>
 800375e:	1e03      	subs	r3, r0, #0
 8003760:	d001      	beq.n	8003766 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003762:	f000 faa9 	bl	8003cb8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <MX_I2C1_Init+0x78>)
 8003768:	2100      	movs	r1, #0
 800376a:	0018      	movs	r0, r3
 800376c:	f7fd ff42 	bl	80015f4 <HAL_I2CEx_ConfigDigitalFilter>
 8003770:	1e03      	subs	r3, r0, #0
 8003772:	d001      	beq.n	8003778 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003774:	f000 faa0 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	20000024 	.word	0x20000024
 8003784:	40005400 	.word	0x40005400

08003788 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800378c:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <MX_LPTIM1_Init+0x48>)
 800378e:	4a11      	ldr	r2, [pc, #68]	; (80037d4 <MX_LPTIM1_Init+0x4c>)
 8003790:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8003792:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <MX_LPTIM1_Init+0x48>)
 8003794:	2200      	movs	r2, #0
 8003796:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <MX_LPTIM1_Init+0x48>)
 800379a:	22e0      	movs	r2, #224	; 0xe0
 800379c:	0112      	lsls	r2, r2, #4
 800379e:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <MX_LPTIM1_Init+0x48>)
 80037a2:	4a0d      	ldr	r2, [pc, #52]	; (80037d8 <MX_LPTIM1_Init+0x50>)
 80037a4:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <MX_LPTIM1_Init+0x48>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 80037ac:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <MX_LPTIM1_Init+0x48>)
 80037ae:	2280      	movs	r2, #128	; 0x80
 80037b0:	03d2      	lsls	r2, r2, #15
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <MX_LPTIM1_Init+0x48>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80037ba:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <MX_LPTIM1_Init+0x48>)
 80037bc:	0018      	movs	r0, r3
 80037be:	f7fd ff65 	bl	800168c <HAL_LPTIM_Init>
 80037c2:	1e03      	subs	r3, r0, #0
 80037c4:	d001      	beq.n	80037ca <MX_LPTIM1_Init+0x42>
  {
    Error_Handler();
 80037c6:	f000 fa77 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	200000ac 	.word	0x200000ac
 80037d4:	40007c00 	.word	0x40007c00
 80037d8:	0000ffff 	.word	0x0000ffff

080037dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037e2:	2310      	movs	r3, #16
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	0018      	movs	r0, r3
 80037e8:	2308      	movs	r3, #8
 80037ea:	001a      	movs	r2, r3
 80037ec:	2100      	movs	r1, #0
 80037ee:	f000 fcaf 	bl	8004150 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037f2:	003b      	movs	r3, r7
 80037f4:	0018      	movs	r0, r3
 80037f6:	2310      	movs	r3, #16
 80037f8:	001a      	movs	r2, r3
 80037fa:	2100      	movs	r1, #0
 80037fc:	f000 fca8 	bl	8004150 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003800:	4b29      	ldr	r3, [pc, #164]	; (80038a8 <MX_TIM2_Init+0xcc>)
 8003802:	2280      	movs	r2, #128	; 0x80
 8003804:	05d2      	lsls	r2, r2, #23
 8003806:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003808:	4b27      	ldr	r3, [pc, #156]	; (80038a8 <MX_TIM2_Init+0xcc>)
 800380a:	2200      	movs	r2, #0
 800380c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800380e:	4b26      	ldr	r3, [pc, #152]	; (80038a8 <MX_TIM2_Init+0xcc>)
 8003810:	2200      	movs	r2, #0
 8003812:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8003814:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <MX_TIM2_Init+0xcc>)
 8003816:	2200      	movs	r2, #0
 8003818:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800381a:	4b23      	ldr	r3, [pc, #140]	; (80038a8 <MX_TIM2_Init+0xcc>)
 800381c:	2200      	movs	r2, #0
 800381e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003820:	4b21      	ldr	r3, [pc, #132]	; (80038a8 <MX_TIM2_Init+0xcc>)
 8003822:	2200      	movs	r2, #0
 8003824:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003826:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <MX_TIM2_Init+0xcc>)
 8003828:	0018      	movs	r0, r3
 800382a:	f7fe fe35 	bl	8002498 <HAL_TIM_PWM_Init>
 800382e:	1e03      	subs	r3, r0, #0
 8003830:	d001      	beq.n	8003836 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003832:	f000 fa41 	bl	8003cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003836:	2110      	movs	r1, #16
 8003838:	187b      	adds	r3, r7, r1
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800383e:	187b      	adds	r3, r7, r1
 8003840:	2200      	movs	r2, #0
 8003842:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003844:	187a      	adds	r2, r7, r1
 8003846:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <MX_TIM2_Init+0xcc>)
 8003848:	0011      	movs	r1, r2
 800384a:	0018      	movs	r0, r3
 800384c:	f7ff f860 	bl	8002910 <HAL_TIMEx_MasterConfigSynchronization>
 8003850:	1e03      	subs	r3, r0, #0
 8003852:	d001      	beq.n	8003858 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8003854:	f000 fa30 	bl	8003cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003858:	003b      	movs	r3, r7
 800385a:	2260      	movs	r2, #96	; 0x60
 800385c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800385e:	003b      	movs	r3, r7
 8003860:	2200      	movs	r2, #0
 8003862:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003864:	003b      	movs	r3, r7
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800386a:	003b      	movs	r3, r7
 800386c:	2200      	movs	r2, #0
 800386e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003870:	0039      	movs	r1, r7
 8003872:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <MX_TIM2_Init+0xcc>)
 8003874:	2200      	movs	r2, #0
 8003876:	0018      	movs	r0, r3
 8003878:	f7fe fe3a 	bl	80024f0 <HAL_TIM_PWM_ConfigChannel>
 800387c:	1e03      	subs	r3, r0, #0
 800387e:	d001      	beq.n	8003884 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8003880:	f000 fa1a 	bl	8003cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003884:	0039      	movs	r1, r7
 8003886:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <MX_TIM2_Init+0xcc>)
 8003888:	2208      	movs	r2, #8
 800388a:	0018      	movs	r0, r3
 800388c:	f7fe fe30 	bl	80024f0 <HAL_TIM_PWM_ConfigChannel>
 8003890:	1e03      	subs	r3, r0, #0
 8003892:	d001      	beq.n	8003898 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8003894:	f000 fa10 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <MX_TIM2_Init+0xcc>)
 800389a:	0018      	movs	r0, r3
 800389c:	f000 fae4 	bl	8003e68 <HAL_TIM_MspPostInit>

}
 80038a0:	46c0      	nop			; (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b006      	add	sp, #24
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	200000dc 	.word	0x200000dc

080038ac <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038b2:	2310      	movs	r3, #16
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	0018      	movs	r0, r3
 80038b8:	2308      	movs	r3, #8
 80038ba:	001a      	movs	r2, r3
 80038bc:	2100      	movs	r1, #0
 80038be:	f000 fc47 	bl	8004150 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038c2:	003b      	movs	r3, r7
 80038c4:	0018      	movs	r0, r3
 80038c6:	2310      	movs	r3, #16
 80038c8:	001a      	movs	r2, r3
 80038ca:	2100      	movs	r1, #0
 80038cc:	f000 fc40 	bl	8004150 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 80038d0:	4b29      	ldr	r3, [pc, #164]	; (8003978 <MX_TIM22_Init+0xcc>)
 80038d2:	4a2a      	ldr	r2, [pc, #168]	; (800397c <MX_TIM22_Init+0xd0>)
 80038d4:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 80038d6:	4b28      	ldr	r3, [pc, #160]	; (8003978 <MX_TIM22_Init+0xcc>)
 80038d8:	2200      	movs	r2, #0
 80038da:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038dc:	4b26      	ldr	r3, [pc, #152]	; (8003978 <MX_TIM22_Init+0xcc>)
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 0;
 80038e2:	4b25      	ldr	r3, [pc, #148]	; (8003978 <MX_TIM22_Init+0xcc>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038e8:	4b23      	ldr	r3, [pc, #140]	; (8003978 <MX_TIM22_Init+0xcc>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ee:	4b22      	ldr	r3, [pc, #136]	; (8003978 <MX_TIM22_Init+0xcc>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 80038f4:	4b20      	ldr	r3, [pc, #128]	; (8003978 <MX_TIM22_Init+0xcc>)
 80038f6:	0018      	movs	r0, r3
 80038f8:	f7fe fdce 	bl	8002498 <HAL_TIM_PWM_Init>
 80038fc:	1e03      	subs	r3, r0, #0
 80038fe:	d001      	beq.n	8003904 <MX_TIM22_Init+0x58>
  {
    Error_Handler();
 8003900:	f000 f9da 	bl	8003cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003904:	2110      	movs	r1, #16
 8003906:	187b      	adds	r3, r7, r1
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800390c:	187b      	adds	r3, r7, r1
 800390e:	2200      	movs	r2, #0
 8003910:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8003912:	187a      	adds	r2, r7, r1
 8003914:	4b18      	ldr	r3, [pc, #96]	; (8003978 <MX_TIM22_Init+0xcc>)
 8003916:	0011      	movs	r1, r2
 8003918:	0018      	movs	r0, r3
 800391a:	f7fe fff9 	bl	8002910 <HAL_TIMEx_MasterConfigSynchronization>
 800391e:	1e03      	subs	r3, r0, #0
 8003920:	d001      	beq.n	8003926 <MX_TIM22_Init+0x7a>
  {
    Error_Handler();
 8003922:	f000 f9c9 	bl	8003cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003926:	003b      	movs	r3, r7
 8003928:	2260      	movs	r2, #96	; 0x60
 800392a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800392c:	003b      	movs	r3, r7
 800392e:	2200      	movs	r2, #0
 8003930:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003932:	003b      	movs	r3, r7
 8003934:	2200      	movs	r2, #0
 8003936:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003938:	003b      	movs	r3, r7
 800393a:	2200      	movs	r2, #0
 800393c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800393e:	0039      	movs	r1, r7
 8003940:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <MX_TIM22_Init+0xcc>)
 8003942:	2200      	movs	r2, #0
 8003944:	0018      	movs	r0, r3
 8003946:	f7fe fdd3 	bl	80024f0 <HAL_TIM_PWM_ConfigChannel>
 800394a:	1e03      	subs	r3, r0, #0
 800394c:	d001      	beq.n	8003952 <MX_TIM22_Init+0xa6>
  {
    Error_Handler();
 800394e:	f000 f9b3 	bl	8003cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003952:	0039      	movs	r1, r7
 8003954:	4b08      	ldr	r3, [pc, #32]	; (8003978 <MX_TIM22_Init+0xcc>)
 8003956:	2204      	movs	r2, #4
 8003958:	0018      	movs	r0, r3
 800395a:	f7fe fdc9 	bl	80024f0 <HAL_TIM_PWM_ConfigChannel>
 800395e:	1e03      	subs	r3, r0, #0
 8003960:	d001      	beq.n	8003966 <MX_TIM22_Init+0xba>
  {
    Error_Handler();
 8003962:	f000 f9a9 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 8003966:	4b04      	ldr	r3, [pc, #16]	; (8003978 <MX_TIM22_Init+0xcc>)
 8003968:	0018      	movs	r0, r3
 800396a:	f000 fa7d 	bl	8003e68 <HAL_TIM_MspPostInit>

}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	46bd      	mov	sp, r7
 8003972:	b006      	add	sp, #24
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	20000070 	.word	0x20000070
 800397c:	40011400 	.word	0x40011400

08003980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003984:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 8003986:	4a15      	ldr	r2, [pc, #84]	; (80039dc <MX_USART2_UART_Init+0x5c>)
 8003988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800398a:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 800398c:	22e1      	movs	r2, #225	; 0xe1
 800398e:	0252      	lsls	r2, r2, #9
 8003990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 8003994:	2200      	movs	r2, #0
 8003996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003998:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 800399a:	2200      	movs	r2, #0
 800399c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800399e:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 80039a6:	220c      	movs	r2, #12
 80039a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039b0:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 80039be:	2200      	movs	r2, #0
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039c2:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 80039c4:	0018      	movs	r0, r3
 80039c6:	f7fe ffe7 	bl	8002998 <HAL_UART_Init>
 80039ca:	1e03      	subs	r3, r0, #0
 80039cc:	d001      	beq.n	80039d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80039ce:	f000 f973 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20000118 	.word	0x20000118
 80039dc:	40004400 	.word	0x40004400

080039e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039e0:	b590      	push	{r4, r7, lr}
 80039e2:	b089      	sub	sp, #36	; 0x24
 80039e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e6:	240c      	movs	r4, #12
 80039e8:	193b      	adds	r3, r7, r4
 80039ea:	0018      	movs	r0, r3
 80039ec:	2314      	movs	r3, #20
 80039ee:	001a      	movs	r2, r3
 80039f0:	2100      	movs	r1, #0
 80039f2:	f000 fbad 	bl	8004150 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f6:	4b36      	ldr	r3, [pc, #216]	; (8003ad0 <MX_GPIO_Init+0xf0>)
 80039f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fa:	4b35      	ldr	r3, [pc, #212]	; (8003ad0 <MX_GPIO_Init+0xf0>)
 80039fc:	2101      	movs	r1, #1
 80039fe:	430a      	orrs	r2, r1
 8003a00:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a02:	4b33      	ldr	r3, [pc, #204]	; (8003ad0 <MX_GPIO_Init+0xf0>)
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	2201      	movs	r2, #1
 8003a08:	4013      	ands	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a0e:	4b30      	ldr	r3, [pc, #192]	; (8003ad0 <MX_GPIO_Init+0xf0>)
 8003a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a12:	4b2f      	ldr	r3, [pc, #188]	; (8003ad0 <MX_GPIO_Init+0xf0>)
 8003a14:	2102      	movs	r1, #2
 8003a16:	430a      	orrs	r2, r1
 8003a18:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a1a:	4b2d      	ldr	r3, [pc, #180]	; (8003ad0 <MX_GPIO_Init+0xf0>)
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	2202      	movs	r2, #2
 8003a20:	4013      	ands	r3, r2
 8003a22:	607b      	str	r3, [r7, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENS_ENA_Pin|COMM_ENA_Pin, GPIO_PIN_SET);
 8003a26:	4b2b      	ldr	r3, [pc, #172]	; (8003ad4 <MX_GPIO_Init+0xf4>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	2122      	movs	r1, #34	; 0x22
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f7fd fce1 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BAT_LO_Pin|OUT4_Pin|OUT3_Pin, GPIO_PIN_RESET);
 8003a32:	2391      	movs	r3, #145	; 0x91
 8003a34:	0219      	lsls	r1, r3, #8
 8003a36:	23a0      	movs	r3, #160	; 0xa0
 8003a38:	05db      	lsls	r3, r3, #23
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f7fd fcd9 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT2_Pin|OUT1_Pin, GPIO_PIN_RESET);
 8003a42:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <MX_GPIO_Init+0xf4>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	2118      	movs	r1, #24
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f7fd fcd3 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENS_ENA_Pin COMM_ENA_Pin */
  GPIO_InitStruct.Pin = SENS_ENA_Pin|COMM_ENA_Pin;
 8003a4e:	0021      	movs	r1, r4
 8003a50:	187b      	adds	r3, r7, r1
 8003a52:	2222      	movs	r2, #34	; 0x22
 8003a54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a56:	187b      	adds	r3, r7, r1
 8003a58:	2201      	movs	r2, #1
 8003a5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a5c:	187b      	adds	r3, r7, r1
 8003a5e:	2201      	movs	r2, #1
 8003a60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a62:	187b      	adds	r3, r7, r1
 8003a64:	2200      	movs	r2, #0
 8003a66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a68:	000c      	movs	r4, r1
 8003a6a:	187b      	adds	r3, r7, r1
 8003a6c:	4a19      	ldr	r2, [pc, #100]	; (8003ad4 <MX_GPIO_Init+0xf4>)
 8003a6e:	0019      	movs	r1, r3
 8003a70:	0010      	movs	r0, r2
 8003a72:	f7fd fb51 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : BAT_LO_Pin OUT4_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = BAT_LO_Pin|OUT4_Pin|OUT3_Pin;
 8003a76:	0021      	movs	r1, r4
 8003a78:	187b      	adds	r3, r7, r1
 8003a7a:	2291      	movs	r2, #145	; 0x91
 8003a7c:	0212      	lsls	r2, r2, #8
 8003a7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a80:	187b      	adds	r3, r7, r1
 8003a82:	2201      	movs	r2, #1
 8003a84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a86:	187b      	adds	r3, r7, r1
 8003a88:	2202      	movs	r2, #2
 8003a8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8c:	187b      	adds	r3, r7, r1
 8003a8e:	2200      	movs	r2, #0
 8003a90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a92:	000c      	movs	r4, r1
 8003a94:	187a      	adds	r2, r7, r1
 8003a96:	23a0      	movs	r3, #160	; 0xa0
 8003a98:	05db      	lsls	r3, r3, #23
 8003a9a:	0011      	movs	r1, r2
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f7fd fb3b 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT2_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = OUT2_Pin|OUT1_Pin;
 8003aa2:	0021      	movs	r1, r4
 8003aa4:	187b      	adds	r3, r7, r1
 8003aa6:	2218      	movs	r2, #24
 8003aa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aaa:	187b      	adds	r3, r7, r1
 8003aac:	2201      	movs	r2, #1
 8003aae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ab0:	187b      	adds	r3, r7, r1
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab6:	187b      	adds	r3, r7, r1
 8003ab8:	2200      	movs	r2, #0
 8003aba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003abc:	187b      	adds	r3, r7, r1
 8003abe:	4a05      	ldr	r2, [pc, #20]	; (8003ad4 <MX_GPIO_Init+0xf4>)
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	0010      	movs	r0, r2
 8003ac4:	f7fd fb28 	bl	8001118 <HAL_GPIO_Init>

}
 8003ac8:	46c0      	nop			; (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b009      	add	sp, #36	; 0x24
 8003ace:	bd90      	pop	{r4, r7, pc}
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	50000400 	.word	0x50000400

08003ad8 <config_int_channel_ADC>:

/* USER CODE BEGIN 4 */
void config_int_channel_ADC(uint32_t channel, uint8_t val)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	000a      	movs	r2, r1
 8003ae2:	1cfb      	adds	r3, r7, #3
 8003ae4:	701a      	strb	r2, [r3, #0]
  ADC_ChannelConfTypeDef sConfig;
  sConfig.Channel = channel;
 8003ae6:	2308      	movs	r3, #8
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	601a      	str	r2, [r3, #0]

  if(val == 1)
 8003aee:	1cfb      	adds	r3, r7, #3
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d125      	bne.n	8003b42 <config_int_channel_ADC+0x6a>
  {
    if(channel == ADC_CHANNEL_VREFINT)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2a      	ldr	r2, [pc, #168]	; (8003ba4 <config_int_channel_ADC+0xcc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d10c      	bne.n	8003b18 <config_int_channel_ADC+0x40>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8003afe:	4b2a      	ldr	r3, [pc, #168]	; (8003ba8 <config_int_channel_ADC+0xd0>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4b29      	ldr	r3, [pc, #164]	; (8003ba8 <config_int_channel_ADC+0xd0>)
 8003b04:	2180      	movs	r1, #128	; 0x80
 8003b06:	03c9      	lsls	r1, r1, #15
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	601a      	str	r2, [r3, #0]
      hadc.Instance->CHSELR = (uint32_t)(ADC_CHSELR_CHSEL17);
 8003b0c:	4b27      	ldr	r3, [pc, #156]	; (8003bac <config_int_channel_ADC+0xd4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2280      	movs	r2, #128	; 0x80
 8003b12:	0292      	lsls	r2, r2, #10
 8003b14:	629a      	str	r2, [r3, #40]	; 0x28
 8003b16:	e00e      	b.n	8003b36 <config_int_channel_ADC+0x5e>
    }
    else if(channel == ADC_CHANNEL_TEMPSENSOR)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a25      	ldr	r2, [pc, #148]	; (8003bb0 <config_int_channel_ADC+0xd8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d10a      	bne.n	8003b36 <config_int_channel_ADC+0x5e>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8003b20:	4b21      	ldr	r3, [pc, #132]	; (8003ba8 <config_int_channel_ADC+0xd0>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <config_int_channel_ADC+0xd0>)
 8003b26:	2180      	movs	r1, #128	; 0x80
 8003b28:	0409      	lsls	r1, r1, #16
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	601a      	str	r2, [r3, #0]
      hadc.Instance->CHSELR = (uint32_t)(ADC_CHSELR_CHSEL6);
 8003b2e:	4b1f      	ldr	r3, [pc, #124]	; (8003bac <config_int_channel_ADC+0xd4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2240      	movs	r2, #64	; 0x40
 8003b34:	629a      	str	r2, [r3, #40]	; 0x28
    }

    sConfig.Rank          = ADC_RANK_CHANNEL_NUMBER;
 8003b36:	2308      	movs	r3, #8
 8003b38:	18fb      	adds	r3, r7, r3
 8003b3a:	2280      	movs	r2, #128	; 0x80
 8003b3c:	0152      	lsls	r2, r2, #5
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	e024      	b.n	8003b8c <config_int_channel_ADC+0xb4>
  }
  else if(val == 0)
 8003b42:	1cfb      	adds	r3, r7, #3
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d120      	bne.n	8003b8c <config_int_channel_ADC+0xb4>
  {
    if(channel == ADC_CHANNEL_VREFINT)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a15      	ldr	r2, [pc, #84]	; (8003ba4 <config_int_channel_ADC+0xcc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10a      	bne.n	8003b68 <config_int_channel_ADC+0x90>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8003b52:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <config_int_channel_ADC+0xd0>)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <config_int_channel_ADC+0xd0>)
 8003b58:	4916      	ldr	r1, [pc, #88]	; (8003bb4 <config_int_channel_ADC+0xdc>)
 8003b5a:	400a      	ands	r2, r1
 8003b5c:	601a      	str	r2, [r3, #0]
      hadc.Instance->CHSELR = 0;
 8003b5e:	4b13      	ldr	r3, [pc, #76]	; (8003bac <config_int_channel_ADC+0xd4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2200      	movs	r2, #0
 8003b64:	629a      	str	r2, [r3, #40]	; 0x28
 8003b66:	e00d      	b.n	8003b84 <config_int_channel_ADC+0xac>
    }
    else if(channel == ADC_CHANNEL_TEMPSENSOR)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a11      	ldr	r2, [pc, #68]	; (8003bb0 <config_int_channel_ADC+0xd8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d109      	bne.n	8003b84 <config_int_channel_ADC+0xac>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8003b70:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <config_int_channel_ADC+0xd0>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <config_int_channel_ADC+0xd0>)
 8003b76:	4910      	ldr	r1, [pc, #64]	; (8003bb8 <config_int_channel_ADC+0xe0>)
 8003b78:	400a      	ands	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]
      hadc.Instance->CHSELR = 0;
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <config_int_channel_ADC+0xd4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2200      	movs	r2, #0
 8003b82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    sConfig.Rank          = ADC_RANK_NONE;
 8003b84:	2308      	movs	r3, #8
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	4a0c      	ldr	r2, [pc, #48]	; (8003bbc <config_int_channel_ADC+0xe4>)
 8003b8a:	605a      	str	r2, [r3, #4]
  }

  HAL_ADC_ConfigChannel(&hadc,&sConfig);
 8003b8c:	2308      	movs	r3, #8
 8003b8e:	18fa      	adds	r2, r7, r3
 8003b90:	4b06      	ldr	r3, [pc, #24]	; (8003bac <config_int_channel_ADC+0xd4>)
 8003b92:	0011      	movs	r1, r2
 8003b94:	0018      	movs	r0, r3
 8003b96:	f7fd f861 	bl	8000c5c <HAL_ADC_ConfigChannel>
}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b004      	add	sp, #16
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	44020000 	.word	0x44020000
 8003ba8:	40012708 	.word	0x40012708
 8003bac:	20000198 	.word	0x20000198
 8003bb0:	48040000 	.word	0x48040000
 8003bb4:	ffbfffff 	.word	0xffbfffff
 8003bb8:	ff7fffff 	.word	0xff7fffff
 8003bbc:	00001001 	.word	0x00001001

08003bc0 <r_single_int_channel_ADC>:

uint32_t r_single_int_channel_ADC(uint32_t channel)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t digital_result;

  config_int_channel_ADC(channel, 1);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2101      	movs	r1, #1
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f7ff ff83 	bl	8003ad8 <config_int_channel_ADC>


  HAL_ADC_Start(&hadc);
 8003bd2:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <r_single_int_channel_ADC+0x50>)
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f7fc ff0b 	bl	80009f0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1000);
 8003bda:	23fa      	movs	r3, #250	; 0xfa
 8003bdc:	009a      	lsls	r2, r3, #2
 8003bde:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <r_single_int_channel_ADC+0x50>)
 8003be0:	0011      	movs	r1, r2
 8003be2:	0018      	movs	r0, r3
 8003be4:	f7fc ff98 	bl	8000b18 <HAL_ADC_PollForConversion>
  digital_result = HAL_ADC_GetValue(&hadc);
 8003be8:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <r_single_int_channel_ADC+0x50>)
 8003bea:	0018      	movs	r0, r3
 8003bec:	f7fd f82a 	bl	8000c44 <HAL_ADC_GetValue>
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	60fb      	str	r3, [r7, #12]
  HAL_ADC_Stop(&hadc);
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <r_single_int_channel_ADC+0x50>)
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f7fc ff4e 	bl	8000a98 <HAL_ADC_Stop>

  config_int_channel_ADC(channel, 0);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2100      	movs	r1, #0
 8003c00:	0018      	movs	r0, r3
 8003c02:	f7ff ff69 	bl	8003ad8 <config_int_channel_ADC>

  return digital_result;
 8003c06:	68fb      	ldr	r3, [r7, #12]
}
 8003c08:	0018      	movs	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b004      	add	sp, #16
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000198 	.word	0x20000198

08003c14 <config_ext_channel_ADC>:

void config_ext_channel_ADC(uint32_t channel, uint8_t val)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	000a      	movs	r2, r1
 8003c1e:	1cfb      	adds	r3, r7, #3
 8003c20:	701a      	strb	r2, [r3, #0]
  ADC_ChannelConfTypeDef sConfig;

  sConfig.Channel = channel;
 8003c22:	2308      	movs	r3, #8
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	601a      	str	r2, [r3, #0]

  if(1 == val)
 8003c2a:	1cfb      	adds	r3, r7, #3
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d105      	bne.n	8003c3e <config_ext_channel_ADC+0x2a>
  {
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003c32:	2308      	movs	r3, #8
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	2280      	movs	r2, #128	; 0x80
 8003c38:	0152      	lsls	r2, r2, #5
 8003c3a:	605a      	str	r2, [r3, #4]
 8003c3c:	e003      	b.n	8003c46 <config_ext_channel_ADC+0x32>
  }
  else
  {
    sConfig.Rank = ADC_RANK_NONE;
 8003c3e:	2308      	movs	r3, #8
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	4a06      	ldr	r2, [pc, #24]	; (8003c5c <config_ext_channel_ADC+0x48>)
 8003c44:	605a      	str	r2, [r3, #4]
  }

  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8003c46:	2308      	movs	r3, #8
 8003c48:	18fa      	adds	r2, r7, r3
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <config_ext_channel_ADC+0x4c>)
 8003c4c:	0011      	movs	r1, r2
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f7fd f804 	bl	8000c5c <HAL_ADC_ConfigChannel>
}
 8003c54:	46c0      	nop			; (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b004      	add	sp, #16
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	00001001 	.word	0x00001001
 8003c60:	20000198 	.word	0x20000198

08003c64 <r_single_ext_channel_ADC>:

uint32_t r_single_ext_channel_ADC(uint32_t channel)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t digital_result;

  config_ext_channel_ADC(channel, 1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2101      	movs	r1, #1
 8003c70:	0018      	movs	r0, r3
 8003c72:	f7ff ffcf 	bl	8003c14 <config_ext_channel_ADC>


  HAL_ADC_Start(&hadc);
 8003c76:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <r_single_ext_channel_ADC+0x50>)
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7fc feb9 	bl	80009f0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1000);
 8003c7e:	23fa      	movs	r3, #250	; 0xfa
 8003c80:	009a      	lsls	r2, r3, #2
 8003c82:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <r_single_ext_channel_ADC+0x50>)
 8003c84:	0011      	movs	r1, r2
 8003c86:	0018      	movs	r0, r3
 8003c88:	f7fc ff46 	bl	8000b18 <HAL_ADC_PollForConversion>
  digital_result = HAL_ADC_GetValue(&hadc);
 8003c8c:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <r_single_ext_channel_ADC+0x50>)
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f7fc ffd8 	bl	8000c44 <HAL_ADC_GetValue>
 8003c94:	0003      	movs	r3, r0
 8003c96:	60fb      	str	r3, [r7, #12]
  HAL_ADC_Stop(&hadc);
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <r_single_ext_channel_ADC+0x50>)
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f7fc fefc 	bl	8000a98 <HAL_ADC_Stop>

  config_ext_channel_ADC(channel, 0);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f7ff ffb5 	bl	8003c14 <config_ext_channel_ADC>

  return digital_result;
 8003caa:	68fb      	ldr	r3, [r7, #12]
}
 8003cac:	0018      	movs	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b004      	add	sp, #16
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	20000198 	.word	0x20000198

08003cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003cbc:	46c0      	nop			; (mov r8, r8)
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc8:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <HAL_MspInit+0x24>)
 8003cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_MspInit+0x24>)
 8003cce:	2101      	movs	r1, #1
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cd4:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <HAL_MspInit+0x24>)
 8003cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <HAL_MspInit+0x24>)
 8003cda:	2180      	movs	r1, #128	; 0x80
 8003cdc:	0549      	lsls	r1, r1, #21
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000

08003cec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf4:	230c      	movs	r3, #12
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	2314      	movs	r3, #20
 8003cfc:	001a      	movs	r2, r3
 8003cfe:	2100      	movs	r1, #0
 8003d00:	f000 fa26 	bl	8004150 <memset>
  if(hadc->Instance==ADC1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a15      	ldr	r2, [pc, #84]	; (8003d60 <HAL_ADC_MspInit+0x74>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d123      	bne.n	8003d56 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d0e:	4b15      	ldr	r3, [pc, #84]	; (8003d64 <HAL_ADC_MspInit+0x78>)
 8003d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d12:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <HAL_ADC_MspInit+0x78>)
 8003d14:	2180      	movs	r1, #128	; 0x80
 8003d16:	0089      	lsls	r1, r1, #2
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <HAL_ADC_MspInit+0x78>)
 8003d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d20:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <HAL_ADC_MspInit+0x78>)
 8003d22:	2101      	movs	r1, #1
 8003d24:	430a      	orrs	r2, r1
 8003d26:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d28:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <HAL_ADC_MspInit+0x78>)
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	4013      	ands	r3, r2
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = ADC_BAT_Pin|ADS_SOIL1_Pin|ADC_SOIL2_Pin|ADC_SOIL3_Pin 
 8003d34:	210c      	movs	r1, #12
 8003d36:	187b      	adds	r3, r7, r1
 8003d38:	221f      	movs	r2, #31
 8003d3a:	601a      	str	r2, [r3, #0]
                          |ADC_SOIL4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d3c:	187b      	adds	r3, r7, r1
 8003d3e:	2203      	movs	r2, #3
 8003d40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d42:	187b      	adds	r3, r7, r1
 8003d44:	2200      	movs	r2, #0
 8003d46:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d48:	187a      	adds	r2, r7, r1
 8003d4a:	23a0      	movs	r3, #160	; 0xa0
 8003d4c:	05db      	lsls	r3, r3, #23
 8003d4e:	0011      	movs	r1, r2
 8003d50:	0018      	movs	r0, r3
 8003d52:	f7fd f9e1 	bl	8001118 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b008      	add	sp, #32
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	40012400 	.word	0x40012400
 8003d64:	40021000 	.word	0x40021000

08003d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d70:	230c      	movs	r3, #12
 8003d72:	18fb      	adds	r3, r7, r3
 8003d74:	0018      	movs	r0, r3
 8003d76:	2314      	movs	r3, #20
 8003d78:	001a      	movs	r2, r3
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	f000 f9e8 	bl	8004150 <memset>
  if(hi2c->Instance==I2C1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <HAL_I2C_MspInit+0x7c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d128      	bne.n	8003ddc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d8a:	4b17      	ldr	r3, [pc, #92]	; (8003de8 <HAL_I2C_MspInit+0x80>)
 8003d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8e:	4b16      	ldr	r3, [pc, #88]	; (8003de8 <HAL_I2C_MspInit+0x80>)
 8003d90:	2102      	movs	r1, #2
 8003d92:	430a      	orrs	r2, r1
 8003d94:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d96:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <HAL_I2C_MspInit+0x80>)
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003da2:	210c      	movs	r1, #12
 8003da4:	187b      	adds	r3, r7, r1
 8003da6:	22c0      	movs	r2, #192	; 0xc0
 8003da8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003daa:	187b      	adds	r3, r7, r1
 8003dac:	2212      	movs	r2, #18
 8003dae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003db0:	187b      	adds	r3, r7, r1
 8003db2:	2201      	movs	r2, #1
 8003db4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db6:	187b      	adds	r3, r7, r1
 8003db8:	2203      	movs	r2, #3
 8003dba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003dbc:	187b      	adds	r3, r7, r1
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc2:	187b      	adds	r3, r7, r1
 8003dc4:	4a09      	ldr	r2, [pc, #36]	; (8003dec <HAL_I2C_MspInit+0x84>)
 8003dc6:	0019      	movs	r1, r3
 8003dc8:	0010      	movs	r0, r2
 8003dca:	f7fd f9a5 	bl	8001118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_I2C_MspInit+0x80>)
 8003dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dd2:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_I2C_MspInit+0x80>)
 8003dd4:	2180      	movs	r1, #128	; 0x80
 8003dd6:	0389      	lsls	r1, r1, #14
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b008      	add	sp, #32
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40005400 	.word	0x40005400
 8003de8:	40021000 	.word	0x40021000
 8003dec:	50000400 	.word	0x50000400

08003df0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a06      	ldr	r2, [pc, #24]	; (8003e18 <HAL_LPTIM_MspInit+0x28>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d106      	bne.n	8003e10 <HAL_LPTIM_MspInit+0x20>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_LPTIM_MspInit+0x2c>)
 8003e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e06:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <HAL_LPTIM_MspInit+0x2c>)
 8003e08:	2180      	movs	r1, #128	; 0x80
 8003e0a:	0609      	lsls	r1, r1, #24
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8003e10:	46c0      	nop			; (mov r8, r8)
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b002      	add	sp, #8
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40007c00 	.word	0x40007c00
 8003e1c:	40021000 	.word	0x40021000

08003e20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	2380      	movs	r3, #128	; 0x80
 8003e2e:	05db      	lsls	r3, r3, #23
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d106      	bne.n	8003e42 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e34:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <HAL_TIM_PWM_MspInit+0x40>)
 8003e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e38:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <HAL_TIM_PWM_MspInit+0x40>)
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8003e40:	e00a      	b.n	8003e58 <HAL_TIM_PWM_MspInit+0x38>
  else if(htim_pwm->Instance==TIM22)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a07      	ldr	r2, [pc, #28]	; (8003e64 <HAL_TIM_PWM_MspInit+0x44>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d105      	bne.n	8003e58 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8003e4c:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <HAL_TIM_PWM_MspInit+0x40>)
 8003e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e50:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <HAL_TIM_PWM_MspInit+0x40>)
 8003e52:	2120      	movs	r1, #32
 8003e54:	430a      	orrs	r2, r1
 8003e56:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003e58:	46c0      	nop			; (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b002      	add	sp, #8
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40011400 	.word	0x40011400

08003e68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b08b      	sub	sp, #44	; 0x2c
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e70:	2314      	movs	r3, #20
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	0018      	movs	r0, r3
 8003e76:	2314      	movs	r3, #20
 8003e78:	001a      	movs	r2, r3
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	f000 f968 	bl	8004150 <memset>
  if(htim->Instance==TIM2)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	05db      	lsls	r3, r3, #23
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d145      	bne.n	8003f18 <HAL_TIM_MspPostInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8c:	4b38      	ldr	r3, [pc, #224]	; (8003f70 <HAL_TIM_MspPostInit+0x108>)
 8003e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e90:	4b37      	ldr	r3, [pc, #220]	; (8003f70 <HAL_TIM_MspPostInit+0x108>)
 8003e92:	2101      	movs	r1, #1
 8003e94:	430a      	orrs	r2, r1
 8003e96:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e98:	4b35      	ldr	r3, [pc, #212]	; (8003f70 <HAL_TIM_MspPostInit+0x108>)
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ea4:	4b32      	ldr	r3, [pc, #200]	; (8003f70 <HAL_TIM_MspPostInit+0x108>)
 8003ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea8:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <HAL_TIM_MspPostInit+0x108>)
 8003eaa:	2102      	movs	r1, #2
 8003eac:	430a      	orrs	r2, r1
 8003eae:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eb0:	4b2f      	ldr	r3, [pc, #188]	; (8003f70 <HAL_TIM_MspPostInit+0x108>)
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB0     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = PWM_LED1_Pin;
 8003ebc:	2414      	movs	r4, #20
 8003ebe:	193b      	adds	r3, r7, r4
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec4:	193b      	adds	r3, r7, r4
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003eca:	193b      	adds	r3, r7, r4
 8003ecc:	2202      	movs	r2, #2
 8003ece:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed0:	193b      	adds	r3, r7, r4
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8003ed6:	193b      	adds	r3, r7, r4
 8003ed8:	2205      	movs	r2, #5
 8003eda:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_LED1_GPIO_Port, &GPIO_InitStruct);
 8003edc:	193a      	adds	r2, r7, r4
 8003ede:	23a0      	movs	r3, #160	; 0xa0
 8003ee0:	05db      	lsls	r3, r3, #23
 8003ee2:	0011      	movs	r1, r2
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7fd f917 	bl	8001118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_LED4_Pin;
 8003eea:	0021      	movs	r1, r4
 8003eec:	187b      	adds	r3, r7, r1
 8003eee:	2201      	movs	r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef2:	187b      	adds	r3, r7, r1
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ef8:	187b      	adds	r3, r7, r1
 8003efa:	2202      	movs	r2, #2
 8003efc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efe:	187b      	adds	r3, r7, r1
 8003f00:	2200      	movs	r2, #0
 8003f02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8003f04:	187b      	adds	r3, r7, r1
 8003f06:	2205      	movs	r2, #5
 8003f08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_LED4_GPIO_Port, &GPIO_InitStruct);
 8003f0a:	187b      	adds	r3, r7, r1
 8003f0c:	4a19      	ldr	r2, [pc, #100]	; (8003f74 <HAL_TIM_MspPostInit+0x10c>)
 8003f0e:	0019      	movs	r1, r3
 8003f10:	0010      	movs	r0, r2
 8003f12:	f7fd f901 	bl	8001118 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 8003f16:	e027      	b.n	8003f68 <HAL_TIM_MspPostInit+0x100>
  else if(htim->Instance==TIM22)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <HAL_TIM_MspPostInit+0x110>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d122      	bne.n	8003f68 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f22:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <HAL_TIM_MspPostInit+0x108>)
 8003f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f26:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <HAL_TIM_MspPostInit+0x108>)
 8003f28:	2101      	movs	r1, #1
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f2e:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <HAL_TIM_MspPostInit+0x108>)
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	2201      	movs	r2, #1
 8003f34:	4013      	ands	r3, r2
 8003f36:	60bb      	str	r3, [r7, #8]
 8003f38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_LED2_Pin|PWM_LED3_Pin;
 8003f3a:	2114      	movs	r1, #20
 8003f3c:	187b      	adds	r3, r7, r1
 8003f3e:	22c0      	movs	r2, #192	; 0xc0
 8003f40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f42:	187b      	adds	r3, r7, r1
 8003f44:	2202      	movs	r2, #2
 8003f46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003f48:	187b      	adds	r3, r7, r1
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f4e:	187b      	adds	r3, r7, r1
 8003f50:	2200      	movs	r2, #0
 8003f52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM22;
 8003f54:	187b      	adds	r3, r7, r1
 8003f56:	2205      	movs	r2, #5
 8003f58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f5a:	187a      	adds	r2, r7, r1
 8003f5c:	23a0      	movs	r3, #160	; 0xa0
 8003f5e:	05db      	lsls	r3, r3, #23
 8003f60:	0011      	movs	r1, r2
 8003f62:	0018      	movs	r0, r3
 8003f64:	f7fd f8d8 	bl	8001118 <HAL_GPIO_Init>
}
 8003f68:	46c0      	nop			; (mov r8, r8)
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b00b      	add	sp, #44	; 0x2c
 8003f6e:	bd90      	pop	{r4, r7, pc}
 8003f70:	40021000 	.word	0x40021000
 8003f74:	50000400 	.word	0x50000400
 8003f78:	40011400 	.word	0x40011400

08003f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f84:	230c      	movs	r3, #12
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	0018      	movs	r0, r3
 8003f8a:	2314      	movs	r3, #20
 8003f8c:	001a      	movs	r2, r3
 8003f8e:	2100      	movs	r1, #0
 8003f90:	f000 f8de 	bl	8004150 <memset>
  if(huart->Instance==USART2)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a18      	ldr	r2, [pc, #96]	; (8003ffc <HAL_UART_MspInit+0x80>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d12a      	bne.n	8003ff4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f9e:	4b18      	ldr	r3, [pc, #96]	; (8004000 <HAL_UART_MspInit+0x84>)
 8003fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fa2:	4b17      	ldr	r3, [pc, #92]	; (8004000 <HAL_UART_MspInit+0x84>)
 8003fa4:	2180      	movs	r1, #128	; 0x80
 8003fa6:	0289      	lsls	r1, r1, #10
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fac:	4b14      	ldr	r3, [pc, #80]	; (8004000 <HAL_UART_MspInit+0x84>)
 8003fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb0:	4b13      	ldr	r3, [pc, #76]	; (8004000 <HAL_UART_MspInit+0x84>)
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fb8:	4b11      	ldr	r3, [pc, #68]	; (8004000 <HAL_UART_MspInit+0x84>)
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003fc4:	210c      	movs	r1, #12
 8003fc6:	187b      	adds	r3, r7, r1
 8003fc8:	22c0      	movs	r2, #192	; 0xc0
 8003fca:	00d2      	lsls	r2, r2, #3
 8003fcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fce:	187b      	adds	r3, r7, r1
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fda:	187b      	adds	r3, r7, r1
 8003fdc:	2203      	movs	r2, #3
 8003fde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003fe0:	187b      	adds	r3, r7, r1
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe6:	187a      	adds	r2, r7, r1
 8003fe8:	23a0      	movs	r3, #160	; 0xa0
 8003fea:	05db      	lsls	r3, r3, #23
 8003fec:	0011      	movs	r1, r2
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f7fd f892 	bl	8001118 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ff4:	46c0      	nop			; (mov r8, r8)
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b008      	add	sp, #32
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40004400 	.word	0x40004400
 8004000:	40021000 	.word	0x40021000

08004004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004012:	e7fe      	b.n	8004012 <HardFault_Handler+0x4>

08004014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004018:	46c0      	nop			; (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800402c:	f7fc fb38 	bl	80006a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004030:	46c0      	nop			; (mov r8, r8)
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800403c:	4b17      	ldr	r3, [pc, #92]	; (800409c <SystemInit+0x64>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b16      	ldr	r3, [pc, #88]	; (800409c <SystemInit+0x64>)
 8004042:	2180      	movs	r1, #128	; 0x80
 8004044:	0049      	lsls	r1, r1, #1
 8004046:	430a      	orrs	r2, r1
 8004048:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <SystemInit+0x64>)
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	4b13      	ldr	r3, [pc, #76]	; (800409c <SystemInit+0x64>)
 8004050:	4913      	ldr	r1, [pc, #76]	; (80040a0 <SystemInit+0x68>)
 8004052:	400a      	ands	r2, r1
 8004054:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004056:	4b11      	ldr	r3, [pc, #68]	; (800409c <SystemInit+0x64>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	4b10      	ldr	r3, [pc, #64]	; (800409c <SystemInit+0x64>)
 800405c:	4911      	ldr	r1, [pc, #68]	; (80040a4 <SystemInit+0x6c>)
 800405e:	400a      	ands	r2, r1
 8004060:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004062:	4b0e      	ldr	r3, [pc, #56]	; (800409c <SystemInit+0x64>)
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <SystemInit+0x64>)
 8004068:	2101      	movs	r1, #1
 800406a:	438a      	bics	r2, r1
 800406c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800406e:	4b0b      	ldr	r3, [pc, #44]	; (800409c <SystemInit+0x64>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <SystemInit+0x64>)
 8004074:	490c      	ldr	r1, [pc, #48]	; (80040a8 <SystemInit+0x70>)
 8004076:	400a      	ands	r2, r1
 8004078:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800407a:	4b08      	ldr	r3, [pc, #32]	; (800409c <SystemInit+0x64>)
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	4b07      	ldr	r3, [pc, #28]	; (800409c <SystemInit+0x64>)
 8004080:	490a      	ldr	r1, [pc, #40]	; (80040ac <SystemInit+0x74>)
 8004082:	400a      	ands	r2, r1
 8004084:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <SystemInit+0x64>)
 8004088:	2200      	movs	r2, #0
 800408a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800408c:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <SystemInit+0x78>)
 800408e:	2280      	movs	r2, #128	; 0x80
 8004090:	0512      	lsls	r2, r2, #20
 8004092:	609a      	str	r2, [r3, #8]
#endif
}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	40021000 	.word	0x40021000
 80040a0:	88ff400c 	.word	0x88ff400c
 80040a4:	fef6fff6 	.word	0xfef6fff6
 80040a8:	fffbffff 	.word	0xfffbffff
 80040ac:	ff02ffff 	.word	0xff02ffff
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80040b4:	480d      	ldr	r0, [pc, #52]	; (80040ec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80040b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80040b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80040ba:	e003      	b.n	80040c4 <LoopCopyDataInit>

080040bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80040bc:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80040be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80040c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80040c2:	3104      	adds	r1, #4

080040c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80040c4:	480b      	ldr	r0, [pc, #44]	; (80040f4 <LoopForever+0xa>)
  ldr  r3, =_edata
 80040c6:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <LoopForever+0xe>)
  adds  r2, r0, r1
 80040c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80040ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80040cc:	d3f6      	bcc.n	80040bc <CopyDataInit>
  ldr  r2, =_sbss
 80040ce:	4a0b      	ldr	r2, [pc, #44]	; (80040fc <LoopForever+0x12>)
  b  LoopFillZerobss
 80040d0:	e002      	b.n	80040d8 <LoopFillZerobss>

080040d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80040d2:	2300      	movs	r3, #0
  str  r3, [r2]
 80040d4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040d6:	3204      	adds	r2, #4

080040d8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80040d8:	4b09      	ldr	r3, [pc, #36]	; (8004100 <LoopForever+0x16>)
  cmp  r2, r3
 80040da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80040dc:	d3f9      	bcc.n	80040d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80040de:	f7ff ffab 	bl	8004038 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040e2:	f000 f811 	bl	8004108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040e6:	f7ff f8c9 	bl	800327c <main>

080040ea <LoopForever>:

LoopForever:
    b LoopForever
 80040ea:	e7fe      	b.n	80040ea <LoopForever>
   ldr   r0, =_estack
 80040ec:	20001fff 	.word	0x20001fff
  ldr  r3, =_sidata
 80040f0:	080041f4 	.word	0x080041f4
  ldr  r0, =_sdata
 80040f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80040f8:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80040fc:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8004100:	200001f4 	.word	0x200001f4

08004104 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004104:	e7fe      	b.n	8004104 <ADC1_COMP_IRQHandler>
	...

08004108 <__libc_init_array>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	2600      	movs	r6, #0
 800410c:	4d0c      	ldr	r5, [pc, #48]	; (8004140 <__libc_init_array+0x38>)
 800410e:	4c0d      	ldr	r4, [pc, #52]	; (8004144 <__libc_init_array+0x3c>)
 8004110:	1b64      	subs	r4, r4, r5
 8004112:	10a4      	asrs	r4, r4, #2
 8004114:	42a6      	cmp	r6, r4
 8004116:	d109      	bne.n	800412c <__libc_init_array+0x24>
 8004118:	2600      	movs	r6, #0
 800411a:	f000 f821 	bl	8004160 <_init>
 800411e:	4d0a      	ldr	r5, [pc, #40]	; (8004148 <__libc_init_array+0x40>)
 8004120:	4c0a      	ldr	r4, [pc, #40]	; (800414c <__libc_init_array+0x44>)
 8004122:	1b64      	subs	r4, r4, r5
 8004124:	10a4      	asrs	r4, r4, #2
 8004126:	42a6      	cmp	r6, r4
 8004128:	d105      	bne.n	8004136 <__libc_init_array+0x2e>
 800412a:	bd70      	pop	{r4, r5, r6, pc}
 800412c:	00b3      	lsls	r3, r6, #2
 800412e:	58eb      	ldr	r3, [r5, r3]
 8004130:	4798      	blx	r3
 8004132:	3601      	adds	r6, #1
 8004134:	e7ee      	b.n	8004114 <__libc_init_array+0xc>
 8004136:	00b3      	lsls	r3, r6, #2
 8004138:	58eb      	ldr	r3, [r5, r3]
 800413a:	4798      	blx	r3
 800413c:	3601      	adds	r6, #1
 800413e:	e7f2      	b.n	8004126 <__libc_init_array+0x1e>
 8004140:	080041ec 	.word	0x080041ec
 8004144:	080041ec 	.word	0x080041ec
 8004148:	080041ec 	.word	0x080041ec
 800414c:	080041f0 	.word	0x080041f0

08004150 <memset>:
 8004150:	0003      	movs	r3, r0
 8004152:	1812      	adds	r2, r2, r0
 8004154:	4293      	cmp	r3, r2
 8004156:	d100      	bne.n	800415a <memset+0xa>
 8004158:	4770      	bx	lr
 800415a:	7019      	strb	r1, [r3, #0]
 800415c:	3301      	adds	r3, #1
 800415e:	e7f9      	b.n	8004154 <memset+0x4>

08004160 <_init>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004166:	bc08      	pop	{r3}
 8004168:	469e      	mov	lr, r3
 800416a:	4770      	bx	lr

0800416c <_fini>:
 800416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004172:	bc08      	pop	{r3}
 8004174:	469e      	mov	lr, r3
 8004176:	4770      	bx	lr
